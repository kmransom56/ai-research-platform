name: üè¢ Organization-Wide Secret Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Secret management action'
        required: true
        default: 'scan'
        type: choice
        options:
          - scan
          - deploy-to-all
          - sync-from-master
          - generate-inventory
          - deploy-workflows
      target_repos:
        description: 'Target repositories (comma-separated, leave empty for all)'
        required: false
      secrets_filter:
        description: 'Specific secrets to deploy (comma-separated, leave empty for all)'
        required: false
      overwrite:
        description: 'Overwrite existing secrets'
        required: false
        default: false
        type: boolean
  
  schedule:
    # Weekly organization-wide secret audit
    - cron: '0 2 * * 1'

env:
  OWNER_TYPE: ${{ github.repository_owner_id == github.actor_id && 'user' || 'org' }}
  MASTER_REPO: ${{ github.repository }}

jobs:
  # Job 1: Discover all repositories in organization
  discover-repositories:
    name: üîç Discover Organization Repositories
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.discover.outputs.repositories }}
      repo-count: ${{ steps.discover.outputs.repo-count }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üîç Discover repositories
      id: discover
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python3 scripts/security/multi-repo-secret-manager.py \
          --owner-type ${{ env.OWNER_TYPE }} \
          discover --include-forks > discovery.json
        
        # Extract repository list
        REPOS=$(python3 -c "
        import json
        with open('discovery.json') as f:
            data = json.load(f)
        repo_list = [repo['full_name'] for repo in data.get('repositories', [])]
        print(json.dumps(repo_list))
        ")
        
        echo "repositories=$REPOS" >> $GITHUB_OUTPUT
        echo "repo-count=$(echo '$REPOS' | jq '. | length')" >> $GITHUB_OUTPUT
        
        echo "üìä Discovered $(echo '$REPOS' | jq '. | length') repositories"

  # Job 2: Organization-wide secret scanning
  organization-scan:
    name: üîç Organization Secret Scan
    runs-on: ubuntu-latest
    needs: discover-repositories
    if: github.event.inputs.action == 'scan' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        repository: ${{ fromJson(needs.discover-repositories.outputs.repositories) }}
      max-parallel: 5
      fail-fast: false
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install dependencies
      run: pip install pyyaml requests python-dotenv

    - name: üîç Scan repository for secrets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Scanning ${{ matrix.repository }} for hardcoded secrets..."
        
        # Clone and scan repository
        gh repo clone ${{ matrix.repository }} /tmp/scan-repo --depth 1
        
        python3 scripts/security/secret-scanner.py /tmp/scan-repo \
          --format json --output scan-results-${{ matrix.repository }}.json
        
        # Upload results
        if [ -f "scan-results-${{ matrix.repository }}.json" ]; then
          echo "üì§ Uploading scan results for ${{ matrix.repository }}"
        fi

    - name: üì§ Upload scan results
      uses: actions/upload-artifact@v3
      with:
        name: secret-scan-results
        path: scan-results-*.json
        retention-days: 30

  # Job 3: Deploy secrets to all repositories
  deploy-secrets-bulk:
    name: üöÄ Bulk Secret Deployment
    runs-on: ubuntu-latest
    needs: discover-repositories
    if: github.event.inputs.action == 'deploy-to-all'
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üìã Prepare master secrets file
      env:
        # All your organization secrets
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_USERNAME: ${{ secrets.GH_USERNAME }}
        GH_EMAIL: ${{ secrets.GH_EMAIL }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
        GOOGLE_MAPS_API: ${{ secrets.GOOGLE_MAPS_API }}
        GOOGLE_DRIVE_ROOT_FOLDER: ${{ secrets.GOOGLE_DRIVE_ROOT_FOLDER }}
        BRAVE_API_KEY: ${{ secrets.BRAVE_API_KEY }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
        GOOGLE_APP_PASSWORD: ${{ secrets.GOOGLE_APP_PASSWORD }}
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        CODESTRAL_API_KEY: ${{ secrets.CODESTRAL_API_KEY }}
        FORTIGATE_IP_ADDRESS: ${{ secrets.FORTIGATE_IP_ADDRESS }}
        FORTIGATE_IP_ADMIN: ${{ secrets.FORTIGATE_IP_ADMIN }}
        FORTIGATE_IP_PASSWORD: ${{ secrets.FORTIGATE_IP_PASSWORD }}
        FORTIGATE_APY_KEY: ${{ secrets.FORTIGATE_APY_KEY }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASS: ${{ secrets.SMTP_PASS }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        # Create master secrets file from environment variables
        cat > org-master-secrets.txt << EOF
        # Organization Master Secrets
        # Generated from GitHub Organization Secrets
        
        # AI Service API Keys
        OPENAI_API_KEY=$OPENAI_API_KEY
        ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY
        GEMINI_API_KEY=$GEMINI_API_KEY
        GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
        GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
        
        # GitHub Integration
        GH_USERNAME=$GH_USERNAME
        GH_EMAIL=$GH_EMAIL
        GH_TOKEN=$GH_TOKEN
        GH_PERSONAL_ACCESS_TOKEN=$GH_PERSONAL_ACCESS_TOKEN
        
        # Network & Infrastructure
        MERAKI_API_KEY=$MERAKI_API_KEY
        GOOGLE_MAPS_API=$GOOGLE_MAPS_API
        GOOGLE_DRIVE_ROOT_FOLDER=$GOOGLE_DRIVE_ROOT_FOLDER
        FORTIGATE_IP_ADDRESS=$FORTIGATE_IP_ADDRESS
        FORTIGATE_IP_ADMIN=$FORTIGATE_IP_ADMIN
        FORTIGATE_IP_PASSWORD=$FORTIGATE_IP_PASSWORD
        FORTIGATE_APY_KEY=$FORTIGATE_APY_KEY
        
        # Development & Deployment
        BRAVE_API_KEY=$BRAVE_API_KEY
        VERCEL_TOKEN=$VERCEL_TOKEN
        VERCEL_PROJECT_ID=$VERCEL_PROJECT_ID
        VERCEL_TEAM_ID=$VERCEL_TEAM_ID
        CONTINUE_API_KEY=$CONTINUE_API_KEY
        VOYAGE_API_KEY=$VOYAGE_API_KEY
        PERPLEXITY_API_KEY=$PERPLEXITY_API_KEY
        MISTRAL_API_KEY=$MISTRAL_API_KEY
        CODESTRAL_API_KEY=$CODESTRAL_API_KEY
        
        # Infrastructure & Communication
        GOOGLE_APP_PASSWORD=$GOOGLE_APP_PASSWORD
        API_TOKEN=$API_TOKEN
        SMTP_USER=$SMTP_USER
        SMTP_PASS=$SMTP_PASS
        REDIS_URL=$REDIS_URL
        DATABASE_URL=$DATABASE_URL
        EOF

    - name: üöÄ Deploy secrets to all repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Parse target repositories and secrets filter
        TARGET_REPOS=""
        if [ -n "${{ github.event.inputs.target_repos }}" ]; then
          TARGET_REPOS="--repos $(echo '${{ github.event.inputs.target_repos }}' | tr ',' ' ')"
        fi
        
        SECRETS_FILTER=""
        if [ -n "${{ github.event.inputs.secrets_filter }}" ]; then
          SECRETS_FILTER="--secrets $(echo '${{ github.event.inputs.secrets_filter }}' | tr ',' ' ')"
        fi
        
        OVERWRITE_FLAG=""
        if [ "${{ github.event.inputs.overwrite }}" = "true" ]; then
          OVERWRITE_FLAG="--overwrite"
        fi
        
        echo "üöÄ Deploying secrets to organization repositories..."
        python3 scripts/security/multi-repo-secret-manager.py \
          --owner-type ${{ env.OWNER_TYPE }} \
          --secrets-file org-master-secrets.txt \
          deploy $TARGET_REPOS $SECRETS_FILTER $OVERWRITE_FLAG

  # Job 4: Deploy secret management workflows
  deploy-workflows:
    name: üìã Deploy Secret Management Workflows  
    runs-on: ubuntu-latest
    needs: discover-repositories
    if: github.event.inputs.action == 'deploy-workflows'
    
    strategy:
      matrix:
        repository: ${{ fromJson(needs.discover-repositories.outputs.repositories) }}
      max-parallel: 3
      fail-fast: false
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üöÄ Deploy workflow to repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Deploying secret management workflow to ${{ matrix.repository }}"
        
        # Check if repository already has the workflow
        if gh api repos/${{ matrix.repository }}/contents/.github/workflows/secret-management.yml >/dev/null 2>&1; then
          echo "‚è≠Ô∏è  Workflow already exists in ${{ matrix.repository }}"
        else
          # Create workflow file content
          WORKFLOW_CONTENT=$(base64 -w 0 .github/workflows/secret-management.yml)
          
          # Create workflow in target repository
          gh api repos/${{ matrix.repository }}/contents/.github/workflows/secret-management.yml \
            --method PUT \
            --field message="üîê Add secret management workflow" \
            --field content="$WORKFLOW_CONTENT" \
            --field branch="main" || \
          gh api repos/${{ matrix.repository }}/contents/.github/workflows/secret-management.yml \
            --method PUT \
            --field message="üîê Add secret management workflow" \
            --field content="$WORKFLOW_CONTENT" \
            --field branch="master"
          
          echo "‚úÖ Deployed workflow to ${{ matrix.repository }}"
        fi

  # Job 5: Generate organization inventory
  generate-inventory:
    name: üìä Organization Secret Inventory
    runs-on: ubuntu-latest
    needs: discover-repositories
    if: github.event.inputs.action == 'generate-inventory' || github.event_name == 'schedule'
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üìä Generate organization inventory
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üìä Generating organization-wide secret inventory..."
        
        python3 scripts/security/multi-repo-secret-manager.py \
          --owner-type ${{ env.OWNER_TYPE }} \
          inventory --output organization-secret-inventory.json
        
        # Generate summary report
        python3 -c "
        import json
        with open('organization-secret-inventory.json') as f:
            data = json.load(f)
        
        print('üìä Organization Secret Inventory Summary')
        print('=' * 50)
        print(f'Organization: {data[\"organization\"]}')
        print(f'Total Repositories: {data[\"total_repositories\"]}')
        print(f'Repositories with Secrets: {data[\"repositories_with_secrets\"]}')
        print(f'Total Secrets Deployed: {data[\"total_secrets_deployed\"]}')
        print(f'Master Secrets Available: {data[\"master_secrets_available\"]}')
        print()
        
        if data['recommendations']:
            print('üîç Recommendations:')
            for rec in data['recommendations']:
                print(f'  - {rec[\"description\"]}')
        "

    - name: üì§ Upload inventory report
      uses: actions/upload-artifact@v3
      with:
        name: organization-secret-inventory
        path: organization-secret-inventory.json
        retention-days: 90

  # Job 6: Security compliance report
  security-compliance:
    name: üõ°Ô∏è Security Compliance Report
    runs-on: ubuntu-latest
    needs: [discover-repositories, organization-scan]
    if: always() && (github.event_name == 'schedule' || github.event.inputs.action == 'scan')
    
    steps:
    - name: üì• Download scan results
      uses: actions/download-artifact@v5
      with:
        name: secret-scan-results
        path: scan-results/

    - name: üìä Generate compliance report
      run: |
        echo "üõ°Ô∏è Generating Security Compliance Report"
        echo "======================================="
        
        # Count total secrets found across all repositories
        TOTAL_SECRETS=0
        REPOS_WITH_SECRETS=0
        
        for file in scan-results/*.json; do
          if [ -f "$file" ]; then
            REPO_SECRETS=$(jq '.total_matches // 0' "$file")
            TOTAL_SECRETS=$((TOTAL_SECRETS + REPO_SECRETS))
            if [ "$REPO_SECRETS" -gt 0 ]; then
              REPOS_WITH_SECRETS=$((REPOS_WITH_SECRETS + 1))
              echo "‚ö†Ô∏è  $(basename "$file" .json): $REPO_SECRETS secrets found"
            fi
          fi
        done
        
        echo ""
        echo "üìä Summary:"
        echo "  Total repositories scanned: $(ls scan-results/*.json 2>/dev/null | wc -l)"
        echo "  Repositories with secrets: $REPOS_WITH_SECRETS"
        echo "  Total hardcoded secrets found: $TOTAL_SECRETS"
        
        if [ "$TOTAL_SECRETS" -gt 0 ]; then
          echo ""
          echo "üö® ACTION REQUIRED: Hardcoded secrets detected!"
          echo "Run the secret replacement workflow to fix these issues."
        else
          echo ""
          echo "‚úÖ No hardcoded secrets detected - Good security posture!"
        fi

    - name: üì§ Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: security-compliance-report
        path: scan-results/
        retention-days: 90

  # Job 7: Notification and summary
  notify-completion:
    name: üì¢ Workflow Completion Notification
    runs-on: ubuntu-latest
    needs: [discover-repositories, deploy-secrets-bulk, deploy-workflows, generate-inventory, security-compliance]
    if: always()
    
    steps:
    - name: üìä Generate summary
      run: |
        echo "üè¢ Organization-Wide Secret Management Summary" 
        echo "=============================================="
        echo "Action: ${{ github.event.inputs.action || 'scheduled-scan' }}"
        echo "Repositories discovered: ${{ needs.discover-repositories.outputs.repo-count }}"
        echo "Timestamp: $(date)"
        echo ""
        
        if [ "${{ needs.deploy-secrets-bulk.result }}" = "success" ]; then
          echo "‚úÖ Bulk secret deployment completed successfully"
        elif [ "${{ needs.deploy-secrets-bulk.result }}" = "failure" ]; then
          echo "‚ùå Bulk secret deployment failed"
        fi
        
        if [ "${{ needs.deploy-workflows.result }}" = "success" ]; then
          echo "‚úÖ Workflow deployment completed successfully"
        elif [ "${{ needs.deploy-workflows.result }}" = "failure" ]; then
          echo "‚ùå Workflow deployment had failures"
        fi
        
        if [ "${{ needs.generate-inventory.result }}" = "success" ]; then
          echo "‚úÖ Inventory generation completed successfully"
        fi
        
        if [ "${{ needs.security-compliance.result }}" = "success" ]; then
          echo "‚úÖ Security compliance scan completed"
        fi
        
        echo ""
        echo "üìã Available Artifacts:"
        echo "  - Organization Secret Inventory (90 days)"
        echo "  - Security Compliance Report (90 days)"
        echo "  - Secret Scan Results (30 days)"