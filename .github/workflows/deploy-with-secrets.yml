name: 🚀 Deploy AI Research Platform with Secrets

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      compose_file:
        description: 'Docker Compose file to use'
        required: true
        default: 'docker-compose.portable.yml'
        type: choice
        options:
          - docker-compose.simple.yml
          - docker-compose.portable.yml
          - docker-compose.ai-stack.yml

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy:
    name: 🚀 Deploy Platform
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔐 Create Environment File from Secrets
        run: |
          cat > .env << 'EOF'
          # =============================================================================
          # AI Research Platform - Runtime Environment
          # Generated from GitHub Repository Secrets
          # =============================================================================
          
          # Core AI Service API Keys
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          AZURE_OPENAI_KEY=${{ secrets.AZURE_OPENAI_KEY }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          
          # External Service APIs
          MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }}
          BRAVE_API_KEY=${{ secrets.BRAVE_API_KEY }}
          GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
          HF_API_KEY=${{ secrets.HF_API_KEY }}
          PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
          VOYAGE_API_KEY=${{ secrets.VOYAGE_API_KEY }}
          
          # GitHub Integration
          GH_TOKEN=${{ secrets.GH_TOKEN }}
          GH_USERNAME=${{ secrets.GH_USERNAME }}
          GH_EMAIL=${{ secrets.GH_EMAIL }}
          
          # Database Configuration
          NEO4J_PASSWORD=secure_neo4j_password_${{ github.run_number }}
          DB_PASSWORD=secure_db_password_${{ github.run_number }}
          POSTGRES_PASSWORD=secure_db_password_${{ github.run_number }}
          
          # Message Queue
          RABBITMQ_DEFAULT_PASS=secure_rabbitmq_password_${{ github.run_number }}
          
          # Application Secrets
          JWT_SECRET=jwt_secret_${{ github.run_number }}_$(date +%s)
          OPENWEBUI_SECRET_KEY=openwebui_secret_${{ github.run_number }}
          VSCODE_PASSWORD=vscode_secure_${{ github.run_number }}
          
          # Platform Configuration
          PLATFORM_IP=localhost
          ASPNETCORE_ENVIRONMENT=${{ inputs.environment }}
          NODE_ENV=${{ inputs.environment }}
          
          # Service URLs
          DATABASE_URL=postgresql://postgres:secure_db_password_${{ github.run_number }}@postgres:5432/chatcopilot
          REDIS_URL=${{ secrets.REDIS_URL || 'redis://redis:6379' }}
          EOF
          
          echo "✅ Environment file created with secrets from repository"
          
      - name: 🔍 Validate Environment Configuration
        run: |
          echo "🔍 Validating required secrets are available..."
          
          required_secrets=("OPENAI_API_KEY" "NEO4J_PASSWORD" "DB_PASSWORD")
          missing_secrets=()
          
          for secret in "${required_secrets[@]}"; do
            if ! grep -q "^${secret}=" .env || grep -q "^${secret}=$" .env; then
              missing_secrets+=("$secret")
            fi
          done
          
          if [ ${#missing_secrets[@]} -eq 0 ]; then
            echo "✅ All required secrets are present"
          else
            echo "❌ Missing required secrets: ${missing_secrets[*]}"
            echo "Please set these secrets in the repository settings"
            exit 1
          fi
          
      - name: 🐳 Validate Docker Compose Configuration
        run: |
          echo "🐳 Validating Docker Compose configuration..."
          
          if docker compose -f ${{ inputs.compose_file }} config > /dev/null; then
            echo "✅ Docker Compose configuration is valid"
          else
            echo "❌ Docker Compose configuration has errors"
            exit 1
          fi
          
      - name: 🧪 Test Service Connectivity (Dry Run)
        run: |
          echo "🧪 Testing API key connectivity..."
          
          # Test OpenAI API key format
          if grep -q "^OPENAI_API_KEY=sk-" .env; then
            echo "✅ OpenAI API key format looks correct"
          else
            echo "⚠️ OpenAI API key may not be set correctly"
          fi
          
          # Test other key formats
          if grep -q "^ANTHROPIC_API_KEY=sk-ant-" .env; then
            echo "✅ Anthropic API key format looks correct"
          else
            echo "⚠️ Anthropic API key may not be set correctly"
          fi
          
          if grep -q "^GH_TOKEN=gh[pousr]_" .env; then
            echo "✅ GitHub token format looks correct"
          else
            echo "⚠️ GitHub token may not be set correctly"
          fi
          
      - name: 🚀 Deploy Platform Services
        run: |
          echo "🚀 Starting AI Research Platform deployment..."
          
          # Pull latest images
          docker compose -f ${{ inputs.compose_file }} pull
          
          # Start services
          docker compose -f ${{ inputs.compose_file }} up -d
          
          echo "✅ Platform services started successfully"
          
      - name: 🩺 Health Check Services
        run: |
          echo "🩺 Performing health checks..."
          
          # Wait for services to start
          sleep 30
          
          # Check service status
          docker compose -f ${{ inputs.compose_file }} ps
          
          # Test core endpoints
          health_checks=()
          
          # Backend API
          if curl -f -s http://localhost:11000/healthz > /dev/null 2>&1; then
            echo "✅ Backend API health check passed"
          else
            echo "⚠️ Backend API health check failed"
            health_checks+=("backend")
          fi
          
          # Neo4j
          if curl -f -s http://localhost:7474 > /dev/null 2>&1; then
            echo "✅ Neo4j health check passed"
          else
            echo "⚠️ Neo4j health check failed"
            health_checks+=("neo4j")
          fi
          
          # Report results
          if [ ${#health_checks[@]} -eq 0 ]; then
            echo "🎉 All health checks passed!"
          else
            echo "⚠️ Health check failures: ${health_checks[*]}"
            echo "Check service logs for details"
            
            # Show logs for failed services
            docker compose -f ${{ inputs.compose_file }} logs
          fi
          
      - name: 🔒 Security Verification
        run: |
          echo "🔒 Running security verification..."
          
          # Verify no secrets in logs
          if docker compose -f ${{ inputs.compose_file }} logs 2>&1 | grep -E "(sk-|ghp_|AIza)" > /dev/null; then
            echo "❌ WARNING: Potential API keys found in service logs!"
            echo "This may indicate a configuration issue"
          else
            echo "✅ No API keys detected in service logs"
          fi
          
          # Verify environment variables are being used
          echo "🔍 Verifying environment variable usage..."
          
          # Check if containers can access environment variables
          if docker compose -f ${{ inputs.compose_file }} exec -T postgres env | grep -q "POSTGRES_PASSWORD"; then
            echo "✅ Environment variables are properly injected into containers"
          else
            echo "⚠️ Environment variables may not be properly configured"
          fi
          
      - name: 📋 Deployment Summary
        run: |
          echo "📋 DEPLOYMENT SUMMARY"
          echo "===================="
          echo "Environment: ${{ inputs.environment }}"
          echo "Compose File: ${{ inputs.compose_file }}"
          echo "Deployment Time: $(date)"
          echo "Git Commit: ${{ github.sha }}"
          echo ""
          echo "🔐 Secrets Configuration:"
          echo "- Repository secrets: $(echo '${{ toJson(secrets) }}' | jq -r 'keys | length') secrets available"
          echo "- Environment file: Created with $(wc -l < .env) lines"
          echo ""
          echo "🚀 Service Status:"
          docker compose -f ${{ inputs.compose_file }} ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
          echo ""
          echo "📱 Access URLs:"
          echo "- Backend API: http://localhost:11000"
          echo "- Frontend: http://localhost:3000"
          echo "- Neo4j Browser: http://localhost:7474"
          echo "- Grafana: http://localhost:11002"
          echo ""
          echo "✅ Deployment completed successfully!"
          
      - name: 🧹 Cleanup Secrets
        if: always()
        run: |
          echo "🧹 Cleaning up sensitive files..."
          
          # Remove environment file with secrets
          rm -f .env
          
          # Clear any temporary secret files
          find . -name "*.env*" -type f -delete 2>/dev/null || true
          
          echo "✅ Cleanup completed"

  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 AI Research Platform deployed successfully!"
          echo "Environment: ${{ inputs.environment }}"
          echo "Services are running with secrets from GitHub repository"
          
      - name: 📢 Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the deployment logs and verify:"
          echo "1. All required GitHub repository secrets are set"
          echo "2. Docker Compose configuration is valid"
          echo "3. Service health checks are passing"
          echo ""
          echo "Required secrets:"
          echo "- OPENAI_API_KEY"
          echo "- ANTHROPIC_API_KEY (optional)"
          echo "- GH_TOKEN"
          echo "- Other service API keys as needed"