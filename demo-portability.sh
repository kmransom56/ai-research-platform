#!/bin/bash\n\n# =============================================================================\n# Chat Copilot Platform - Portability and Rsync Demo Script\n# =============================================================================\n# This script demonstrates the portability and synchronization features\n# =============================================================================\n\nset -euo pipefail\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m' # No Color\n\n# Print functions\nprint_status() {\n    local level=$1\n    local message=$2\n    case $level in\n        \"INFO\")  echo -e \"${BLUE}‚ÑπÔ∏è  ${message}${NC}\" ;;\n        \"SUCCESS\") echo -e \"${GREEN}‚úÖ ${message}${NC}\" ;;\n        \"WARNING\") echo -e \"${YELLOW}‚ö†Ô∏è  ${message}${NC}\" ;;\n        \"ERROR\") echo -e \"${RED}‚ùå ${message}${NC}\" ;;\n        \"DEMO\") echo -e \"${PURPLE}üé¨ ${message}${NC}\" ;;\n        \"STEP\") echo -e \"${CYAN}üìã ${message}${NC}\" ;;\n    esac\n}\n\nprint_banner() {\n    echo \"==============================================================================\"\n    echo \"üé¨ CHAT COPILOT PLATFORM - PORTABILITY & RSYNC DEMO\"\n    echo \"üöÄ Demonstrating portable deployment and synchronization features\"\n    echo \"==============================================================================\"\n    echo\n}\n\nshow_help() {\n    cat << EOF\nüé¨ Chat Copilot Platform - Portability and Rsync Demo\n\nUSAGE:\n    $0 [DEMO_TYPE]\n\nDEMO TYPES:\n    system-detection    Show system detection capabilities\n    portability        Demonstrate portability enhancement\n    rsync-setup        Show rsync configuration setup\n    sync-demo          Demonstrate synchronization features\n    full-demo          Run complete demonstration\n    quick-start        Quick start guide walkthrough\n\nEXAMPLES:\n    $0 system-detection    # Show what the system detector finds\n    $0 portability         # Demo portability enhancement\n    $0 rsync-setup         # Show rsync setup process\n    $0 full-demo           # Complete demonstration\n\nEOF\n}\n\n# Demo system detection\ndemo_system_detection() {\n    print_step \"System Detection Demo\"\n    \n    print_status \"DEMO\" \"Running system detection...\"\n    \n    if [[ -f \"scripts/setup/detect-system.sh\" ]]; then\n        print_status \"INFO\" \"System information detected:\"\n        ./scripts/setup/detect-system.sh\n        \n        echo\n        print_status \"INFO\" \"JSON output:\"\n        ./scripts/setup/detect-system.sh --json | jq .\n    else\n        print_status \"WARNING\" \"System detection script not found. Run portability enhancement first.\"\n        print_status \"INFO\" \"Would you like to run it now? (y/N)\"\n        read -r response\n        if [[ \"$response\" =~ ^[Yy]$ ]]; then\n            demo_portability_enhancement\n        fi\n    fi\n}\n\n# Demo portability enhancement\ndemo_portability_enhancement() {\n    print_step \"Portability Enhancement Demo\"\n    \n    print_status \"DEMO\" \"Running portability enhancement...\"\n    print_status \"INFO\" \"This will:\"\n    print_status \"INFO\" \"  - Detect your system configuration\"\n    print_status \"INFO\" \"  - Create portable environment templates\"\n    print_status \"INFO\" \"  - Fix any hard-coded paths\"\n    print_status \"INFO\" \"  - Generate deployment-ready configurations\"\n    \n    echo\n    print_status \"INFO\" \"Continue with enhancement? (y/N)\"\n    read -r response\n    if [[ \"$response\" =~ ^[Yy]$ ]]; then\n        ./scripts/setup/enhance-portability.sh\n        \n        print_status \"SUCCESS\" \"Portability enhancement completed!\"\n        \n        if [[ -f \".env.portable.template\" ]]; then\n            print_status \"INFO\" \"Generated files:\"\n            ls -la .env.portable.template docker-compose.portable.yml start-platform-portable.sh 2>/dev/null || true\n        fi\n    else\n        print_status \"INFO\" \"Skipping portability enhancement\"\n    fi\n}\n\n# Demo rsync setup\ndemo_rsync_setup() {\n    print_step \"Rsync Setup Demo\"\n    \n    print_status \"DEMO\" \"Demonstrating rsync configuration setup...\"\n    \n    if [[ -f \"scripts/sync/rsync-platform.sh\" ]]; then\n        print_status \"INFO\" \"Rsync script is available. Showing help:\"\n        ./scripts/sync/rsync-platform.sh --help | head -30\n        \n        echo\n        print_status \"INFO\" \"Would you like to setup rsync configuration? (y/N)\"\n        read -r response\n        if [[ \"$response\" =~ ^[Yy]$ ]]; then\n            ./scripts/sync/rsync-platform.sh setup\n            \n            if [[ -f \"scripts/sync/rsync-config.conf\" ]]; then\n                print_status \"SUCCESS\" \"Rsync configuration created!\"\n                print_status \"INFO\" \"Configuration preview:\"\n                head -20 scripts/sync/rsync-config.conf\n            fi\n        fi\n    else\n        print_status \"ERROR\" \"Rsync script not found. Please run portability enhancement first.\"\n    fi\n}\n\n# Demo sync features\ndemo_sync_features() {\n    print_step \"Synchronization Features Demo\"\n    \n    print_status \"DEMO\" \"Demonstrating sync capabilities...\"\n    \n    if [[ -f \"scripts/sync/rsync-platform.sh\" ]]; then\n        print_status \"INFO\" \"Available sync commands:\"\n        echo \"  ‚Ä¢ push <target>     - Push local changes to remote\"\n        echo \"  ‚Ä¢ pull <target>     - Pull remote changes to local\"\n        echo \"  ‚Ä¢ sync <target>     - Bidirectional synchronization\"\n        echo \"  ‚Ä¢ backup <target>   - Create backup on remote\"\n        echo \"  ‚Ä¢ status <target>   - Show sync status\"\n        echo \"  ‚Ä¢ test <target>     - Test connection\"\n        \n        echo\n        print_status \"INFO\" \"Example commands:\"\n        echo \"  ./scripts/sync/rsync-platform.sh push dev-server --dry-run\"\n        echo \"  ./scripts/sync/rsync-platform.sh pull prod-server --exclude-data\"\n        echo \"  ./scripts/sync/rsync-platform.sh sync staging-server --compress\"\n        echo \"  ./scripts/sync/rsync-platform.sh backup prod-server\"\n        \n        if [[ -f \"scripts/sync/rsync-config.conf\" ]]; then\n            print_status \"INFO\" \"Configured targets:\"\n            ./scripts/sync/rsync-platform.sh list-targets 2>/dev/null || echo \"  No targets configured yet\"\n        fi\n    else\n        print_status \"ERROR\" \"Rsync script not found\"\n    fi\n}\n\n# Demo portable startup\ndemo_portable_startup() {\n    print_step \"Portable Startup Demo\"\n    \n    print_status \"DEMO\" \"Demonstrating portable startup options...\"\n    \n    if [[ -f \"start-platform-portable.sh\" ]]; then\n        print_status \"INFO\" \"Portable startup script is available!\"\n        print_status \"INFO\" \"Available profiles:\"\n        ./start-platform-portable.sh --help | grep -A 10 \"Profiles:\"\n        \n        echo\n        print_status \"INFO\" \"Example startup commands:\"\n        echo \"  ./start-platform-portable.sh                # Default profile\"\n        echo \"  ./start-platform-portable.sh development    # With dev tools\"\n        echo \"  ./start-platform-portable.sh production     # Production setup\"\n        echo \"  ./start-platform-portable.sh full           # Everything\"\n        \n        if [[ -f \".env\" ]]; then\n            print_status \"SUCCESS\" \"Environment file is configured\"\n        elif [[ -f \".env.portable.template\" ]]; then\n            print_status \"WARNING\" \"Environment template available, but .env not created\"\n            print_status \"INFO\" \"To create: cp .env.portable.template .env\"\n        else\n            print_status \"WARNING\" \"No environment configuration found\"\n        fi\n    else\n        print_status \"ERROR\" \"Portable startup script not found\"\n    fi\n}\n\n# Show current status\nshow_current_status() {\n    print_step \"Current Platform Status\"\n    \n    print_status \"INFO\" \"Checking current platform status...\"\n    \n    # Check for key files\n    local files_status=(\n        \".env.portable.template:Portable environment template\"\n        \"docker-compose.portable.yml:Portable Docker Compose\"\n        \"start-platform-portable.sh:Portable startup script\"\n        \"scripts/sync/rsync-platform.sh:Rsync synchronization script\"\n        \"scripts/setup/enhance-portability.sh:Portability enhancement script\"\n        \"scripts/setup/detect-system.sh:System detection script\"\n    )\n    \n    for item in \"${files_status[@]}\"; do\n        local file=\"${item%%:*}\"\n        local desc=\"${item##*:}\"\n        \n        if [[ -f \"$file\" ]]; then\n            print_status \"SUCCESS\" \"$desc: Available\"\n        else\n            print_status \"WARNING\" \"$desc: Missing\"\n        fi\n    done\n    \n    echo\n    \n    # Check Docker status\n    if command -v docker >/dev/null 2>&1; then\n        if docker info >/dev/null 2>&1; then\n            print_status \"SUCCESS\" \"Docker: Running\"\n            \n            # Check for running containers\n            local running_containers\n            running_containers=$(docker ps --format \"{{.Names}}\" | grep -c \"chat-copilot\" || echo \"0\")\n            if [[ \"$running_containers\" -gt 0 ]]; then\n                print_status \"SUCCESS\" \"Chat Copilot containers: $running_containers running\"\n                docker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\" | grep chat-copilot || true\n            else\n                print_status \"INFO\" \"Chat Copilot containers: None running\"\n            fi\n        else\n            print_status \"WARNING\" \"Docker: Installed but not running\"\n        fi\n    else\n        print_status \"ERROR\" \"Docker: Not installed\"\n    fi\n}\n\n# Print step header\nprint_step() {\n    local step_name=\"$1\"\n    echo\n    echo \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\"\n    print_status \"STEP\" \"$step_name\"\n    echo \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\"\n}\n\n# Quick start guide\nquick_start_guide() {\n    print_step \"Quick Start Guide\"\n    \n    print_status \"DEMO\" \"Here's how to get started with portable Chat Copilot:\"\n    \n    echo\n    print_status \"INFO\" \"Step 1: Enhance Portability\"\n    echo \"  ./scripts/setup/enhance-portability.sh\"\n    \n    print_status \"INFO\" \"Step 2: Configure Environment\"\n    echo \"  cp .env.portable.template .env\"\n    echo \"  nano .env  # Edit with your API keys and configuration\"\n    \n    print_status \"INFO\" \"Step 3: Setup Rsync (Optional)\"\n    echo \"  ./scripts/sync/rsync-platform.sh setup\"\n    echo \"  nano scripts/sync/rsync-config.conf  # Configure your targets\"\n    \n    print_status \"INFO\" \"Step 4: Start Platform\"\n    echo \"  ./start-platform-portable.sh\"\n    \n    print_status \"INFO\" \"Step 5: Access Services\"\n    echo \"  Chat Copilot: http://localhost:3000\"\n    echo \"  OpenWebUI: http://localhost:11880\"\n    echo \"  Backend API: http://localhost:11000\"\n    \n    print_status \"INFO\" \"Step 6: Sync with Remote (Optional)\"\n    echo \"  ./scripts/sync/rsync-platform.sh push dev-server\"\n    \n    echo\n    print_status \"SUCCESS\" \"That's it! Your platform is portable and sync-ready! üöÄ\"\n}\n\n# Full demo\nfull_demo() {\n    print_banner\n    \n    print_status \"DEMO\" \"Running complete portability and rsync demonstration...\"\n    \n    show_current_status\n    demo_system_detection\n    demo_portability_enhancement\n    demo_rsync_setup\n    demo_sync_features\n    demo_portable_startup\n    quick_start_guide\n    \n    print_status \"SUCCESS\" \"Complete demonstration finished!\"\n    print_status \"INFO\" \"Check the documentation: docs/PORTABILITY_AND_SYNC_GUIDE.md\"\n}\n\n# Main function\nmain() {\n    local demo_type=\"${1:-full-demo}\"\n    \n    case $demo_type in\n        \"system-detection\")\n            print_banner\n            demo_system_detection\n            ;;\n        \"portability\")\n            print_banner\n            demo_portability_enhancement\n            ;;\n        \"rsync-setup\")\n            print_banner\n            demo_rsync_setup\n            ;;\n        \"sync-demo\")\n            print_banner\n            demo_sync_features\n            ;;\n        \"startup\")\n            print_banner\n            demo_portable_startup\n            ;;\n        \"status\")\n            print_banner\n            show_current_status\n            ;;\n        \"quick-start\")\n            print_banner\n            quick_start_guide\n            ;;\n        \"full-demo\")\n            full_demo\n            ;;\n        \"help\"|\"--help\"|\"-h\")\n            show_help\n            ;;\n        *)\n            print_status \"ERROR\" \"Unknown demo type: $demo_type\"\n            show_help\n            exit 1\n            ;;\n    esac\n}\n\n# Run main function\nmain \"$@\""