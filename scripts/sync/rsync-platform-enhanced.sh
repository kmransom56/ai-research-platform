#!/bin/bash\n\n# =============================================================================\n# Chat Copilot Platform Enhanced Rsync Synchronization Script\n# =============================================================================\n# This script provides comprehensive rsync synchronization for the Chat Copilot\n# platform between different computers, with support for development, staging,\n# and production environments, including systemd services.\n# =============================================================================\n\nset -euo pipefail\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m' # No Color\n\n# Script configuration\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPLATFORM_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nCONFIG_DIR=\"$PLATFORM_ROOT/scripts/sync\"\nLOG_DIR=\"$PLATFORM_ROOT/logs/sync\"\nDATE=$(date +\"%Y%m%d_%H%M%S\")\n\n# Create necessary directories\nmkdir -p \"$LOG_DIR\" \"$CONFIG_DIR\"\n\n# Print functions\nprint_status() {\n    local level=$1\n    local message=$2\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    case $level in\n        \"INFO\")  echo -e \"${BLUE}[$timestamp] ‚ÑπÔ∏è  ${message}${NC}\" ;;\n        \"SUCCESS\") echo -e \"${GREEN}[$timestamp] ‚úÖ ${message}${NC}\" ;;\n        \"WARNING\") echo -e \"${YELLOW}[$timestamp] ‚ö†Ô∏è  ${message}${NC}\" ;;\n        \"ERROR\") echo -e \"${RED}[$timestamp] ‚ùå ${message}${NC}\" ;;\n        \"SYNC\") echo -e \"${PURPLE}[$timestamp] üîÑ ${message}${NC}\" ;;\n        \"REMOTE\") echo -e \"${CYAN}[$timestamp] üåê ${message}${NC}\" ;;\n    esac\n}\n\nprint_banner() {\n    echo \"==============================================================================\"\n    echo \"üîÑ CHAT COPILOT PLATFORM ENHANCED RSYNC SYNCHRONIZATION\"\n    echo \"üöÄ Intelligent sync for development, staging, and production environments\"\n    echo \"üîß Including systemd services and complete platform deployment\"\n    echo \"==============================================================================\"\n    echo\n}\n\nshow_help() {\n    cat << EOF\nüîÑ Chat Copilot Platform Enhanced Rsync Synchronization\n\nUSAGE:\n    $0 [COMMAND] [OPTIONS]\n\nCOMMANDS:\n    push <target>     Push local changes to remote target\n    pull <target>     Pull remote changes to local\n    sync <target>     Bidirectional sync with conflict resolution\n    backup <target>   Create backup on remote target\n    restore <target>  Restore from remote backup\n    status <target>   Show sync status and differences\n    setup             Setup rsync configuration\n    list-targets      List configured sync targets\n    test <target>     Test connection to target\n    systemd           Manage systemd services sync (see systemd --help)\n    full-deploy       Complete deployment including systemd services\n\nTARGETS:\n    You can use predefined targets or specify custom ones:\n    - dev-server      Development server\n    - staging-server  Staging environment\n    - prod-server     Production server\n    - backup-server   Backup server\n    - user@host:/path Custom target\n\nOPTIONS:\n    --dry-run         Show what would be transferred without doing it\n    --exclude-data    Exclude data directories (databases, uploads, etc.)\n    --include-secrets Include .env and secret files (use with caution)\n    --include-systemd Include systemd service files sync\n    --compress        Use compression for transfer\n    --delete          Delete files on destination that don't exist in source\n    --verbose         Verbose output\n    --config FILE     Use custom configuration file\n    --log-file FILE   Custom log file location\n\nEXAMPLES:\n    # Setup rsync configuration\n    $0 setup\n\n    # Push to development server\n    $0 push dev-server\n\n    # Pull from production with dry run\n    $0 pull prod-server --dry-run\n\n    # Sync with staging server excluding data\n    $0 sync staging-server --exclude-data\n\n    # Full deployment including systemd services\n    $0 full-deploy prod-server --include-systemd\n\n    # Backup to backup server\n    $0 backup backup-server\n\n    # Custom target sync\n    $0 push user@192.168.1.100:/opt/chat-copilot --compress\n\n    # Test connection\n    $0 test dev-server\n\n    # Sync with systemd services\n    $0 push dev-server --include-systemd\n\n    # Manage systemd services\n    $0 systemd scan\n    $0 systemd push dev-server\n\nCONFIGURATION:\n    Configuration is stored in: $CONFIG_DIR/rsync-config.conf\n    SSH keys should be set up for passwordless authentication.\n\nLOGS:\n    Sync logs are stored in: $LOG_DIR/\n\nSYSTEMD SERVICES:\n    Platform-related systemd services are automatically detected and can be\n    synchronized separately or as part of the main sync process.\n\nEOF\n}\n\n# Load configuration\nload_config() {\n    local config_file=\"$CONFIG_DIR/rsync-config.conf\"\n    \n    if [[ -f \"$config_file\" ]]; then\n        source \"$config_file\"\n        print_status \"INFO\" \"Loaded configuration from $config_file\"\n    else\n        print_status \"WARNING\" \"No configuration file found. Run '$0 setup' first.\"\n        return 1\n    fi\n}\n\n# Setup rsync configuration\nsetup_config() {\n    local config_file=\"$CONFIG_DIR/rsync-config.conf\"\n    \n    print_status \"INFO\" \"Setting up enhanced rsync configuration...\"\n    \n    cat > \"$config_file\" << 'EOF'\n# Chat Copilot Platform Enhanced Rsync Configuration\n# Edit this file to configure your sync targets\n\n# Default rsync options\nRSYNC_DEFAULT_OPTS=\"-avz --progress --stats\"\nRSYNC_SSH_OPTS=\"-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"\n\n# Sync targets (format: TARGET_NAME=\"user@host:/path\")\nDEV_SERVER=\"user@dev.example.com:/opt/chat-copilot\"\nSTAGING_SERVER=\"user@staging.example.com:/opt/chat-copilot\"\nPROD_SERVER=\"user@prod.example.com:/opt/chat-copilot\"\nBACKUP_SERVER=\"user@backup.example.com:/backups/chat-copilot\"\n\n# SSH key paths (optional - uses default if not specified)\nSSH_KEY_DEV=\"$HOME/.ssh/id_rsa\"\nSSH_KEY_STAGING=\"$HOME/.ssh/id_rsa\"\nSSH_KEY_PROD=\"$HOME/.ssh/id_rsa_prod\"\nSSH_KEY_BACKUP=\"$HOME/.ssh/id_rsa\"\n\n# Exclude patterns (files/directories to exclude from sync)\nEXCLUDE_PATTERNS=(\n    \".git\"\n    \".gitignore\"\n    \"node_modules\"\n    \"*.log\"\n    \"logs/*\"\n    \"pids/*\"\n    \"temp/*\"\n    \"tmp/*\"\n    \".env.local\"\n    \".env.*.local\"\n    \"data/postgres/*\"\n    \"data/qdrant/*\"\n    \"data/redis/*\"\n    \"data/uploads/*\"\n    \"config-backups/*\"\n    \"config-snapshots/*\"\n    \"*.swp\"\n    \"*.swo\"\n    \"*~\"\n    \".DS_Store\"\n    \"Thumbs.db\"\n)\n\n# Data directories (excluded when --exclude-data is used)\nDATA_PATTERNS=(\n    \"data/\"\n    \"postgres-data/\"\n    \"qdrant-data/\"\n    \"redis-data/\"\n    \"uploads/\"\n    \"backups/\"\n    \"*.db\"\n    \"*.sqlite\"\n    \"*.sql\"\n)\n\n# Secret files (included only when --include-secrets is used)\nSECRET_PATTERNS=(\n    \".env\"\n    \".env.production\"\n    \".env.staging\"\n    \"secrets/\"\n    \"*.key\"\n    \"*.pem\"\n    \"*.crt\"\n)\n\n# Systemd service patterns (included when --include-systemd is used)\nSYSTEMD_PATTERNS=(\n    \"*ai-platform*\"\n    \"*chat-copilot*\"\n    \"*openwebui*\"\n    \"*ollama*\"\n    \"*perplexica*\"\n    \"*searxng*\"\n    \"*autogen*\"\n    \"*magentic*\"\n)\nEOF\n\n    print_status \"SUCCESS\" \"Enhanced configuration created at $config_file\"\n    print_status \"INFO\" \"Please edit the configuration file to set your sync targets:\"\n    print_status \"INFO\" \"nano $config_file\"\n    \n    # Create SSH key if it doesn't exist\n    if [[ ! -f \"$HOME/.ssh/id_rsa\" ]]; then\n        print_status \"INFO\" \"No SSH key found. Generating one...\"\n        ssh-keygen -t rsa -b 4096 -f \"$HOME/.ssh/id_rsa\" -N \"\"\n        print_status \"SUCCESS\" \"SSH key generated at $HOME/.ssh/id_rsa\"\n        print_status \"INFO\" \"Copy your public key to remote servers:\"\n        print_status \"INFO\" \"ssh-copy-id user@remote-server\"\n    fi\n}\n\n# Get target configuration\nget_target_config() {\n    local target=$1\n    local target_var\n    local ssh_key_var\n    \n    case $target in\n        \"dev-server\")\n            target_var=\"DEV_SERVER\"\n            ssh_key_var=\"SSH_KEY_DEV\"\n            ;;\n        \"staging-server\")\n            target_var=\"STAGING_SERVER\"\n            ssh_key_var=\"SSH_KEY_STAGING\"\n            ;;\n        \"prod-server\")\n            target_var=\"PROD_SERVER\"\n            ssh_key_var=\"SSH_KEY_PROD\"\n            ;;\n        \"backup-server\")\n            target_var=\"BACKUP_SERVER\"\n            ssh_key_var=\"SSH_KEY_BACKUP\"\n            ;;\n        *)\n            # Custom target\n            if [[ $target =~ ^[^@]+@[^:]+:.+ ]]; then\n                TARGET_PATH=\"$target\"\n                SSH_KEY=\"$HOME/.ssh/id_rsa\"\n                return 0\n            else\n                print_status \"ERROR\" \"Invalid target format: $target\"\n                print_status \"INFO\" \"Use format: user@host:/path\"\n                return 1\n            fi\n            ;;\n    esac\n    \n    # Get target path from variable\n    TARGET_PATH=\"${!target_var:-}\"\n    if [[ -z \"$TARGET_PATH\" ]]; then\n        print_status \"ERROR\" \"Target '$target' not configured\"\n        print_status \"INFO\" \"Run '$0 setup' to configure targets\"\n        return 1\n    fi\n    \n    # Get SSH key from variable\n    SSH_KEY=\"${!ssh_key_var:-$HOME/.ssh/id_rsa}\"\n    \n    return 0\n}\n\n# Build rsync command\nbuild_rsync_command() {\n    local direction=$1  # push, pull, sync\n    local source=$2\n    local dest=$3\n    local options=()\n    \n    # Base options\n    options+=(\"$RSYNC_DEFAULT_OPTS\")\n    \n    # SSH options\n    if [[ -f \"$SSH_KEY\" ]]; then\n        options+=(\"--rsh=ssh -i $SSH_KEY $RSYNC_SSH_OPTS\")\n    else\n        options+=(\"--rsh=ssh $RSYNC_SSH_OPTS\")\n    fi\n    \n    # Add exclude patterns\n    for pattern in \"${EXCLUDE_PATTERNS[@]}\"; do\n        options+=(\"--exclude=$pattern\")\n    done\n    \n    # Add data exclusions if requested\n    if [[ \"$EXCLUDE_DATA\" == \"true\" ]]; then\n        for pattern in \"${DATA_PATTERNS[@]}\"; do\n            options+=(\"--exclude=$pattern\")\n        done\n    fi\n    \n    # Include secrets only if explicitly requested\n    if [[ \"$INCLUDE_SECRETS\" != \"true\" ]]; then\n        for pattern in \"${SECRET_PATTERNS[@]}\"; do\n            options+=(\"--exclude=$pattern\")\n        done\n    fi\n    \n    # Additional options\n    [[ \"$DRY_RUN\" == \"true\" ]] && options+=(\"--dry-run\")\n    [[ \"$DELETE\" == \"true\" ]] && options+=(\"--delete\")\n    [[ \"$COMPRESS\" == \"true\" ]] && options+=(\"--compress\")\n    [[ \"$VERBOSE\" == \"true\" ]] && options+=(\"--verbose\")\n    \n    # Build command\n    RSYNC_CMD=(\"rsync\" \"${options[@]}\" \"$source\" \"$dest\")\n}\n\n# Sync systemd services\nsync_systemd_services() {\n    local target=$1\n    local direction=$2  # push, pull, sync\n    \n    if [[ \"$INCLUDE_SYSTEMD\" != \"true\" ]]; then\n        return 0\n    fi\n    \n    print_status \"SYNC\" \"Synchronizing systemd services with $target ($direction)...\"\n    \n    # Use the systemd sync script\n    local systemd_script=\"$SCRIPT_DIR/rsync-systemd-services.sh\"\n    \n    if [[ ! -f \"$systemd_script\" ]]; then\n        print_status \"WARNING\" \"Systemd sync script not found: $systemd_script\"\n        return 1\n    fi\n    \n    local systemd_args=(\"$direction\" \"$target\")\n    [[ \"$DRY_RUN\" == \"true\" ]] && systemd_args+=(\"--dry-run\")\n    [[ \"$VERBOSE\" == \"true\" ]] && systemd_args+=(\"--verbose\")\n    \n    if \"$systemd_script\" \"${systemd_args[@]}\"; then\n        print_status \"SUCCESS\" \"Systemd services synchronized successfully\"\n    else\n        print_status \"WARNING\" \"Systemd services sync completed with warnings\"\n    fi\n}\n\n# Test connection to target\ntest_connection() {\n    local target=$1\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    local host=$(echo \"$TARGET_PATH\" | cut -d: -f1)\n    local path=$(echo \"$TARGET_PATH\" | cut -d: -f2)\n    \n    print_status \"INFO\" \"Testing connection to $target ($TARGET_PATH)...\"\n    \n    # Test SSH connection\n    if ssh -i \"$SSH_KEY\" $RSYNC_SSH_OPTS \"$host\" \"test -d $path\" 2>/dev/null; then\n        print_status \"SUCCESS\" \"Connection successful to $target\"\n        \n        # Get remote system info\n        local remote_info\n        remote_info=$(ssh -i \"$SSH_KEY\" $RSYNC_SSH_OPTS \"$host\" \"uname -a && df -h $path\" 2>/dev/null)\n        print_status \"REMOTE\" \"Remote system info:\"\n        echo \"$remote_info\" | while read -r line; do\n            print_status \"REMOTE\" \"  $line\"\n        done\n        \n        # Test systemd access if requested\n        if [[ \"$INCLUDE_SYSTEMD\" == \"true\" ]]; then\n            print_status \"INFO\" \"Testing systemd access...\"\n            if ssh -i \"$SSH_KEY\" $RSYNC_SSH_OPTS \"$host\" \"sudo systemctl --version\" >/dev/null 2>&1; then\n                print_status \"SUCCESS\" \"Systemd access available\"\n            else\n                print_status \"WARNING\" \"Systemd access may require password\"\n            fi\n        fi\n        \n        return 0\n    else\n        print_status \"ERROR\" \"Connection failed to $target\"\n        print_status \"INFO\" \"Check SSH key and target configuration\"\n        return 1\n    fi\n}\n\n# Push local changes to remote\npush_to_remote() {\n    local target=$1\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    print_status \"SYNC\" \"Pushing local changes to $target...\"\n    \n    # Sync systemd services first if requested\n    sync_systemd_services \"$target\" \"push\"\n    \n    local source=\"$PLATFORM_ROOT/\"\n    local dest=\"$TARGET_PATH\"\n    \n    build_rsync_command \"push\" \"$source\" \"$dest\"\n    \n    # Log command\n    echo \"$(date): ${RSYNC_CMD[*]}\" >> \"$LOG_DIR/rsync-$target-$DATE.log\"\n    \n    # Execute rsync\n    if \"${RSYNC_CMD[@]}\" 2>&1 | tee -a \"$LOG_DIR/rsync-$target-$DATE.log\"; then\n        print_status \"SUCCESS\" \"Push to $target completed successfully\"\n    else\n        print_status \"ERROR\" \"Push to $target failed\"\n        return 1\n    fi\n}\n\n# Pull remote changes to local\npull_from_remote() {\n    local target=$1\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    print_status \"SYNC\" \"Pulling remote changes from $target...\"\n    \n    local source=\"$TARGET_PATH/\"\n    local dest=\"$PLATFORM_ROOT/\"\n    \n    build_rsync_command \"pull\" \"$source\" \"$dest\"\n    \n    # Log command\n    echo \"$(date): ${RSYNC_CMD[*]}\" >> \"$LOG_DIR/rsync-$target-$DATE.log\"\n    \n    # Execute rsync\n    if \"${RSYNC_CMD[@]}\" 2>&1 | tee -a \"$LOG_DIR/rsync-$target-$DATE.log\"; then\n        print_status \"SUCCESS\" \"Pull from $target completed successfully\"\n        \n        # Sync systemd services after if requested\n        sync_systemd_services \"$target\" \"pull\"\n    else\n        print_status \"ERROR\" \"Pull from $target failed\"\n        return 1\n    fi\n}\n\n# Bidirectional sync with conflict resolution\nbidirectional_sync() {\n    local target=$1\n    \n    print_status \"SYNC\" \"Starting bidirectional sync with $target...\"\n    \n    # First, do a dry run to check for conflicts\n    local original_dry_run=\"$DRY_RUN\"\n    DRY_RUN=\"true\"\n    \n    print_status \"INFO\" \"Checking for conflicts...\"\n    \n    # Check what would be pushed\n    print_status \"INFO\" \"Changes that would be pushed:\"\n    push_to_remote \"$target\"\n    \n    # Check what would be pulled\n    print_status \"INFO\" \"Changes that would be pulled:\"\n    pull_from_remote \"$target\"\n    \n    DRY_RUN=\"$original_dry_run\"\n    \n    if [[ \"$DRY_RUN\" != \"true\" ]]; then\n        read -p \"Continue with bidirectional sync? (y/N): \" -n 1 -r\n        echo\n        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n            print_status \"INFO\" \"Sync cancelled by user\"\n            return 0\n        fi\n        \n        # Perform actual sync\n        print_status \"SYNC\" \"Performing bidirectional sync...\"\n        \n        # Sync systemd services bidirectionally if requested\n        if [[ \"$INCLUDE_SYSTEMD\" == \"true\" ]]; then\n            sync_systemd_services \"$target\" \"sync\"\n        fi\n        \n        # Push first, then pull\n        push_to_remote \"$target\" && pull_from_remote \"$target\"\n    fi\n}\n\n# Full deployment including systemd services\nfull_deploy() {\n    local target=$1\n    \n    print_status \"SYNC\" \"Starting full deployment to $target...\"\n    \n    # Force include systemd for full deployment\n    INCLUDE_SYSTEMD=\"true\"\n    \n    # Create backup first\n    create_backup \"$target\"\n    \n    # Push everything\n    push_to_remote \"$target\"\n    \n    # Get remote host for post-deployment commands\n    local host=$(echo \"$TARGET_PATH\" | cut -d: -f1)\n    local path=$(echo \"$TARGET_PATH\" | cut -d: -f2)\n    \n    if [[ \"$DRY_RUN\" != \"true\" ]]; then\n        print_status \"SYNC\" \"Running post-deployment commands...\"\n        \n        # Remote post-deployment script\n        local post_deploy_script=\"\n            cd $path\n            \n            # Reload systemd\n            sudo systemctl daemon-reload\n            \n            # Make scripts executable\n            find . -name '*.sh' -exec chmod +x {} \\;\n            \n            # Create necessary directories\n            mkdir -p logs pids data backups temp\n            \n            # Set permissions\n            chmod 755 logs pids data backups temp\n            \n            echo 'Post-deployment setup completed'\n        \"\n        \n        if ssh -i \"$SSH_KEY\" $RSYNC_SSH_OPTS \"$host\" \"$post_deploy_script\"; then\n            print_status \"SUCCESS\" \"Full deployment to $target completed successfully\"\n        else\n            print_status \"WARNING\" \"Deployment completed but post-deployment setup had issues\"\n        fi\n    fi\n}\n\n# Create backup on remote\ncreate_backup() {\n    local target=$1\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    local backup_name=\"chat-copilot-backup-$DATE\"\n    local host=$(echo \"$TARGET_PATH\" | cut -d: -f1)\n    local path=$(echo \"$TARGET_PATH\" | cut -d: -f2)\n    \n    print_status \"SYNC\" \"Creating backup on $target...\"\n    \n    # Create backup directory and archive\n    local backup_script=\"\n        mkdir -p $path/backups\n        \n        # Backup platform files\n        tar -czf $path/backups/$backup_name.tar.gz -C $path --exclude=backups --exclude=logs --exclude=temp .\n        \n        # Backup systemd services if they exist\n        if ls /etc/systemd/system/*ai-platform* /etc/systemd/system/*chat-copilot* /etc/systemd/system/*openwebui* /etc/systemd/system/*ollama* 2>/dev/null; then\n            mkdir -p $path/backups/systemd-$DATE\n            sudo cp /etc/systemd/system/*ai-platform* /etc/systemd/system/*chat-copilot* /etc/systemd/system/*openwebui* /etc/systemd/system/*ollama* $path/backups/systemd-$DATE/ 2>/dev/null || true\n            sudo chown -R \\$(whoami) $path/backups/systemd-$DATE/\n        fi\n        \n        echo 'Backup completed'\n    \"\n    \n    if ssh -i \"$SSH_KEY\" $RSYNC_SSH_OPTS \"$host\" \"$backup_script\" 2>/dev/null; then\n        print_status \"SUCCESS\" \"Backup created: $backup_name.tar.gz\"\n    else\n        print_status \"ERROR\" \"Backup creation failed\"\n        return 1\n    fi\n}\n\n# Show sync status\nshow_status() {\n    local target=$1\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    print_status \"INFO\" \"Checking sync status with $target...\"\n    \n    # Use rsync dry-run to show differences\n    local original_dry_run=\"$DRY_RUN\"\n    local original_verbose=\"$VERBOSE\"\n    DRY_RUN=\"true\"\n    VERBOSE=\"true\"\n    \n    print_status \"INFO\" \"Files that would be pushed to remote:\"\n    push_to_remote \"$target\"\n    \n    print_status \"INFO\" \"Files that would be pulled from remote:\"\n    pull_from_remote \"$target\"\n    \n    DRY_RUN=\"$original_dry_run\"\n    VERBOSE=\"$original_verbose\"\n}\n\n# List configured targets\nlist_targets() {\n    if ! load_config; then\n        return 1\n    fi\n    \n    print_status \"INFO\" \"Configured sync targets:\"\n    echo\n    \n    [[ -n \"${DEV_SERVER:-}\" ]] && echo \"  dev-server      ‚Üí $DEV_SERVER\"\n    [[ -n \"${STAGING_SERVER:-}\" ]] && echo \"  staging-server  ‚Üí $STAGING_SERVER\"\n    [[ -n \"${PROD_SERVER:-}\" ]] && echo \"  prod-server     ‚Üí $PROD_SERVER\"\n    [[ -n \"${BACKUP_SERVER:-}\" ]] && echo \"  backup-server   ‚Üí $BACKUP_SERVER\"\n    \n    echo\n    print_status \"INFO\" \"You can also use custom targets: user@host:/path\"\n}\n\n# Handle systemd command delegation\nhandle_systemd_command() {\n    local systemd_script=\"$SCRIPT_DIR/rsync-systemd-services.sh\"\n    \n    if [[ ! -f \"$systemd_script\" ]]; then\n        print_status \"ERROR\" \"Systemd sync script not found: $systemd_script\"\n        print_status \"INFO\" \"Please ensure rsync-systemd-services.sh is in the same directory\"\n        return 1\n    fi\n    \n    # Pass all remaining arguments to the systemd script\n    shift  # Remove 'systemd' from arguments\n    \"$systemd_script\" \"$@\"\n}\n\n# Parse command line arguments\nparse_arguments() {\n    # Default values\n    DRY_RUN=\"false\"\n    EXCLUDE_DATA=\"false\"\n    INCLUDE_SECRETS=\"false\"\n    INCLUDE_SYSTEMD=\"false\"\n    COMPRESS=\"false\"\n    DELETE=\"false\"\n    VERBOSE=\"false\"\n    CUSTOM_CONFIG=\"\"\n    CUSTOM_LOG=\"\"\n    \n    # Parse options\n    while [[ $# -gt 0 ]]; do\n        case $1 in\n            --dry-run)\n                DRY_RUN=\"true\"\n                shift\n                ;;\n            --exclude-data)\n                EXCLUDE_DATA=\"true\"\n                shift\n                ;;\n            --include-secrets)\n                INCLUDE_SECRETS=\"true\"\n                shift\n                ;;\n            --include-systemd)\n                INCLUDE_SYSTEMD=\"true\"\n                shift\n                ;;\n            --compress)\n                COMPRESS=\"true\"\n                shift\n                ;;\n            --delete)\n                DELETE=\"true\"\n                shift\n                ;;\n            --verbose)\n                VERBOSE=\"true\"\n                shift\n                ;;\n            --config)\n                CUSTOM_CONFIG=\"$2\"\n                shift 2\n                ;;\n            --log-file)\n                CUSTOM_LOG=\"$2\"\n                shift 2\n                ;;\n            --help|-h)\n                show_help\n                exit 0\n                ;;\n            -*)\n                print_status \"ERROR\" \"Unknown option: $1\"\n                show_help\n                exit 1\n                ;;\n            *)\n                # This is a positional argument\n                break\n                ;;\n        esac\n    done\n    \n    # Store remaining arguments\n    REMAINING_ARGS=(\"$@\")\n}\n\n# Main function\nmain() {\n    print_banner\n    \n    # Parse arguments\n    parse_arguments \"$@\"\n    \n    # Check if we have any arguments left\n    if [[ ${#REMAINING_ARGS[@]} -eq 0 ]]; then\n        print_status \"ERROR\" \"No command specified\"\n        show_help\n        exit 1\n    fi\n    \n    local command=\"${REMAINING_ARGS[0]}\"\n    local target=\"${REMAINING_ARGS[1]:-}\"\n    \n    # Handle systemd command delegation\n    if [[ \"$command\" == \"systemd\" ]]; then\n        handle_systemd_command \"${REMAINING_ARGS[@]}\"\n        return $?\n    fi\n    \n    # Load configuration for most commands\n    if [[ \"$command\" != \"setup\" && \"$command\" != \"help\" ]]; then\n        if [[ -n \"$CUSTOM_CONFIG\" ]]; then\n            source \"$CUSTOM_CONFIG\"\n        else\n            load_config || exit 1\n        fi\n    fi\n    \n    # Execute command\n    case $command in\n        \"setup\")\n            setup_config\n            ;;\n        \"push\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for push command\"; exit 1; }\n            push_to_remote \"$target\"\n            ;;\n        \"pull\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for pull command\"; exit 1; }\n            pull_from_remote \"$target\"\n            ;;\n        \"sync\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for sync command\"; exit 1; }\n            bidirectional_sync \"$target\"\n            ;;\n        \"full-deploy\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for full-deploy command\"; exit 1; }\n            full_deploy \"$target\"\n            ;;\n        \"backup\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for backup command\"; exit 1; }\n            create_backup \"$target\"\n            ;;\n        \"status\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for status command\"; exit 1; }\n            show_status \"$target\"\n            ;;\n        \"test\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for test command\"; exit 1; }\n            test_connection \"$target\"\n            ;;\n        \"list-targets\")\n            list_targets\n            ;;\n        \"help\")\n            show_help\n            ;;\n        *)\n            print_status \"ERROR\" \"Unknown command: $command\"\n            show_help\n            exit 1\n            ;;\n    esac\n}\n\n# Run main function with all arguments\nmain \"$@\""