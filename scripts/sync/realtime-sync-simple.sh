#!/bin/bash

# =============================================================================\n# Chat Copilot Platform - Simple Real-Time Synchronization\n# =============================================================================\n# Simplified real-time sync script for development workflow\n# =============================================================================\n\nset -euo pipefail\n\n# Colors\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\n# Configuration\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPLATFORM_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nLOG_DIR=\"$PLATFORM_ROOT/logs/sync\"\nPID_DIR=\"$PLATFORM_ROOT/pids\"\nDATE=$(date +\"%Y%m%d_%H%M%S\")\n\n# Create directories\nmkdir -p \"$LOG_DIR\" \"$PID_DIR\"\n\n# Files\nPID_FILE=\"$PID_DIR/realtime-sync.pid\"\nLOG_FILE=\"$LOG_DIR/realtime-sync-$DATE.log\"\n\n# Print function\nprint_status() {\n    local level=$1\n    local message=$2\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    case $level in\n        \"INFO\")  echo -e \"${BLUE}[$timestamp] ‚ÑπÔ∏è  ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"SUCCESS\") echo -e \"${GREEN}[$timestamp] ‚úÖ ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"WARNING\") echo -e \"${YELLOW}[$timestamp] ‚ö†Ô∏è  ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"ERROR\") echo -e \"${RED}[$timestamp] ‚ùå ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"SYNC\") echo -e \"${PURPLE}[$timestamp] üîÑ ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"WATCH\") echo -e \"${CYAN}[$timestamp] üëÅÔ∏è  ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n    esac\n}\n\n# Show help\nshow_help() {\n    cat << EOF\nüîÑ Chat Copilot Platform Simple Real-Time Sync\n\nUSAGE:\n    $0 [COMMAND]\n\nCOMMANDS:\n    start         Start real-time sync to backup server\n    stop          Stop real-time sync\n    status        Show sync status\n    test          Test sync functionality\n    monitor       Monitor sync activity\n    help          Show this help\n\nEXAMPLES:\n    $0 start      # Start watching and syncing to backup server\n    $0 status     # Check if sync is running\n    $0 stop       # Stop the sync process\n\nNOTES:\n    - Syncs changes TO backup server (192.168.0.5) in real-time\n    - Watches for file changes in key directories\n    - Includes systemd services synchronization\n    - Excludes temporary files and build artifacts\n\nEOF\n}\n\n# Sync single file\nsync_file() {\n    local file_path=\"$1\"\n    local rel_path=\"${file_path#$PLATFORM_ROOT/}\"\n    \n    # Skip if file doesn't exist\n    if [[ ! -e \"$file_path\" ]]; then\n        return 0\n    fi\n    \n    # Skip temporary files\n    case \"$rel_path\" in\n        *.log|*.tmp|*.swp|*.swo|*~|*.pyc|*.pyo)\n            return 0\n            ;;\n        .git/*|node_modules/*|__pycache__/*|.venv/*|venv/*|build/*|dist/*|target/*|bin/*|obj/*|logs/*|pids/*|temp/*|tmp/*)\n            return 0\n            ;;\n    esac\n    \n    # Sync to backup server\n    if rsync -avz \"$file_path\" \"keith-ransom@192.168.0.5:~/chat-copilot/$rel_path\" 2>&1 | tee -a \"$LOG_FILE\"; then\n        print_status \"SYNC\" \"Synced: $rel_path\"\n        \n        # If it's a service file, sync to systemd\n        if [[ \"$rel_path\" == *.service ]]; then\n            local service_name=$(basename \"$rel_path\")\n            if [[ -f \"/etc/systemd/system/$service_name\" ]]; then\n                if rsync -avz \"/etc/systemd/system/$service_name\" \"keith-ransom@192.168.0.5:/tmp/\" 2>&1 | tee -a \"$LOG_FILE\"; then\n                    ssh keith-ransom@192.168.0.5 \"sudo cp /tmp/$service_name /etc/systemd/system/ && sudo systemctl daemon-reload\" 2>&1 | tee -a \"$LOG_FILE\"\n                    print_status \"SYNC\" \"Synced systemd service: $service_name\"\n                fi\n            fi\n        fi\n    else\n        print_status \"ERROR\" \"Failed to sync: $rel_path\"\n    fi\n}\n\n# Start file watcher\nstart_watcher() {\n    print_status \"INFO\" \"Starting real-time sync to backup server...\"\n    \n    # Initial full sync\n    print_status \"SYNC\" \"Performing initial sync...\"\n    \"$SCRIPT_DIR/rsync-platform-enhanced.sh\" push backup-server --include-systemd 2>&1 | tee -a \"$LOG_FILE\"\n    \n    # Watch directories\n    local watch_dirs=(\n        \"$PLATFORM_ROOT/webapi\"\n        \"$PLATFORM_ROOT/webapp\"\n        \"$PLATFORM_ROOT/scripts\"\n        \"$PLATFORM_ROOT/configs\"\n        \"$PLATFORM_ROOT/docker\"\n        \"$PLATFORM_ROOT/docs\"\n        \"$PLATFORM_ROOT/agents\"\n        \"$PLATFORM_ROOT/plugins\"\n        \"$PLATFORM_ROOT/tools\"\n        \"$PLATFORM_ROOT/python\"\n        \"$PLATFORM_ROOT/shared\"\n        \"$PLATFORM_ROOT\"\n    )\n    \n    # Filter existing directories\n    local existing_dirs=()\n    for dir in \"${watch_dirs[@]}\"; do\n        if [[ -d \"$dir\" ]]; then\n            existing_dirs+=(\"$dir\")\n        fi\n    done\n    \n    if [[ ${#existing_dirs[@]} -eq 0 ]]; then\n        print_status \"ERROR\" \"No directories to watch found\"\n        return 1\n    fi\n    \n    print_status \"WATCH\" \"Watching directories: ${existing_dirs[*]}\"\n    \n    # Start inotify watcher\n    inotifywait -m -r -e modify,create,delete,move \\\n        --format '%w%f %e' \\\n        \"${existing_dirs[@]}\" 2>&1 | \\\n    while read -r file event; do\n        # Skip if file matches exclude patterns\n        case \"$file\" in\n            *.log|*.tmp|*.swp|*.swo|*~|*.pyc|*.pyo|*.lock)\n                continue\n                ;;\n            */.git/*|*/node_modules/*|*/__pycache__/*|*/.venv/*|*/venv/*|*/build/*|*/dist/*|*/target/*|*/bin/*|*/obj/*|*/logs/*|*/pids/*|*/temp/*|*/tmp/*)\n                continue\n                ;;\n        esac\n        \n        print_status \"WATCH\" \"File change detected: $file ($event)\"\n        \n        # Small delay to avoid rapid successive syncs\n        sleep 1\n        \n        # Sync in background\n        sync_file \"$file\" &\n        \n        # Limit concurrent jobs\n        local job_count=$(jobs -r | wc -l)\n        if [[ $job_count -ge 3 ]]; then\n            wait\n        fi\n    done\n}\n\n# Start sync\nstart_sync() {\n    if [[ -f \"$PID_FILE\" ]]; then\n        local pid=$(cat \"$PID_FILE\")\n        if kill -0 \"$pid\" 2>/dev/null; then\n            print_status \"WARNING\" \"Sync is already running (PID: $pid)\"\n            return 1\n        else\n            rm -f \"$PID_FILE\"\n        fi\n    fi\n    \n    # Check dependencies\n    if ! command -v inotifywait &> /dev/null; then\n        print_status \"ERROR\" \"inotify-tools not installed. Installing...\"\n        sudo apt-get update && sudo apt-get install -y inotify-tools\n    fi\n    \n    # Test connection\n    if ! ssh -o ConnectTimeout=5 keith-ransom@192.168.0.5 \"echo 'connected'\" >/dev/null 2>&1; then\n        print_status \"ERROR\" \"Cannot connect to backup server\"\n        return 1\n    fi\n    \n    print_status \"SUCCESS\" \"Starting real-time sync...\"\n    \n    # Start watcher in background\n    start_watcher &\n    local watcher_pid=$!\n    \n    # Save PID\n    echo \"$watcher_pid\" > \"$PID_FILE\"\n    \n    print_status \"SUCCESS\" \"Real-time sync started (PID: $watcher_pid)\"\n    print_status \"INFO\" \"Syncing changes to backup server: 192.168.0.5\"\n    print_status \"INFO\" \"Use '$0 stop' to stop sync\"\n    \n    # Wait for watcher\n    wait\n}\n\n# Stop sync\nstop_sync() {\n    if [[ -f \"$PID_FILE\" ]]; then\n        local pid=$(cat \"$PID_FILE\")\n        if kill -0 \"$pid\" 2>/dev/null; then\n            print_status \"INFO\" \"Stopping real-time sync (PID: $pid)...\"\n            kill \"$pid\"\n            \n            # Kill any child processes\n            pkill -P \"$pid\" 2>/dev/null || true\n            \n            # Remove PID file\n            rm -f \"$PID_FILE\"\n            \n            print_status \"SUCCESS\" \"Real-time sync stopped\"\n        else\n            print_status \"WARNING\" \"Sync process not running\"\n            rm -f \"$PID_FILE\"\n        fi\n    else\n        print_status \"WARNING\" \"No sync process found\"\n    fi\n}\n\n# Show status\nshow_status() {\n    print_status \"INFO\" \"Real-time sync status:\"\n    \n    if [[ -f \"$PID_FILE\" ]]; then\n        local pid=$(cat \"$PID_FILE\")\n        if kill -0 \"$pid\" 2>/dev/null; then\n            print_status \"SUCCESS\" \"Sync is running (PID: $pid)\"\n            \n            # Show process info\n            local cpu_usage=$(ps -p \"$pid\" -o %cpu --no-headers 2>/dev/null || echo \"N/A\")\n            local mem_usage=$(ps -p \"$pid\" -o %mem --no-headers 2>/dev/null || echo \"N/A\")\n            echo \"  CPU: ${cpu_usage}%\"\n            echo \"  Memory: ${mem_usage}%\"\n            \n            # Show recent activity\n            if [[ -f \"$LOG_FILE\" ]]; then\n                print_status \"INFO\" \"Recent activity:\"\n                tail -5 \"$LOG_FILE\" | while read -r line; do\n                    echo \"  $line\"\n                done\n            fi\n        else\n            print_status \"WARNING\" \"Sync process not running (stale PID file)\"\n            rm -f \"$PID_FILE\"\n        fi\n    else\n        print_status \"INFO\" \"Sync is not running\"\n    fi\n    \n    # Test connection\n    if ssh -o ConnectTimeout=5 keith-ransom@192.168.0.5 \"echo 'connected'\" >/dev/null 2>&1; then\n        print_status \"SUCCESS\" \"Connection to backup server: OK\"\n    else\n        print_status \"ERROR\" \"Connection to backup server: FAILED\"\n    fi\n}\n\n# Test sync\ntest_sync() {\n    print_status \"INFO\" \"Testing real-time sync functionality...\"\n    \n    # Create test file\n    local test_file=\"$PLATFORM_ROOT/test-realtime-sync-$DATE.txt\"\n    echo \"Real-time sync test - $DATE\" > \"$test_file\"\n    \n    print_status \"INFO\" \"Created test file: $test_file\"\n    \n    # Test sync\n    sync_file \"$test_file\"\n    \n    # Verify on backup server\n    if ssh keith-ransom@192.168.0.5 \"test -f ~/chat-copilot/test-realtime-sync-$DATE.txt\"; then\n        print_status \"SUCCESS\" \"Test file successfully synced to backup server\"\n        \n        # Cleanup\n        rm -f \"$test_file\"\n        ssh keith-ransom@192.168.0.5 \"rm -f ~/chat-copilot/test-realtime-sync-$DATE.txt\"\n        print_status \"INFO\" \"Test files cleaned up\"\n    else\n        print_status \"ERROR\" \"Test file not found on backup server\"\n        rm -f \"$test_file\"\n        return 1\n    fi\n}\n\n# Monitor sync\nmonitor_sync() {\n    print_status \"INFO\" \"Monitoring real-time sync activity (Ctrl+C to exit)...\"\n    \n    if [[ -f \"$LOG_FILE\" ]]; then\n        tail -f \"$LOG_FILE\"\n    else\n        print_status \"WARNING\" \"No log file found. Start sync first.\"\n    fi\n}\n\n# Main function\nmain() {\n    case \"${1:-help}\" in\n        \"start\")\n            start_sync\n            ;;\n        \"stop\")\n            stop_sync\n            ;;\n        \"status\")\n            show_status\n            ;;\n        \"test\")\n            test_sync\n            ;;\n        \"monitor\")\n            monitor_sync\n            ;;\n        \"help\"|*)\n            show_help\n            ;;\n    esac\n}\n\n# Run main function\nmain \"$@\""