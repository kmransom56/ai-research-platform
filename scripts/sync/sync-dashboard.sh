#!/bin/bash

# =============================================================================
# Chat Copilot Platform - Real-Time Sync Dashboard
# =============================================================================
# Interactive dashboard for monitoring real-time synchronization
# =============================================================================

set -euo pipefail

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
PURPLE='\\033[0;35m'
CYAN='\\033[0;36m'
WHITE='\\033[1;37m'
NC='\\033[0m' # No Color

# Script configuration
SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"
PLATFORM_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"
LOG_DIR=\"$PLATFORM_ROOT/logs/sync\"
PID_DIR=\"$PLATFORM_ROOT/pids\"

# Clear screen and show header
show_header() {
    clear
    echo -e \"${WHITE}================================================================================${NC}\"
    echo -e \"${CYAN}üîÑ CHAT COPILOT PLATFORM - REAL-TIME SYNC DASHBOARD${NC}\"
    echo -e \"${WHITE}================================================================================${NC}\"
    echo -e \"${BLUE}üíæ Source Server: 192.168.0.1 (ubuntuaicodeserver)${NC}\"
    echo -e \"${GREEN}üéÆ Backup Server: 192.168.0.5 (ubuntuaicodeserver-2) - High GPU RAM${NC}\"
    echo -e \"${WHITE}================================================================================${NC}\"
    echo
}

# Show sync status
show_sync_status() {
    local pid_file=\"$PID_DIR/realtime-sync.pid\"
    
    echo -e \"${WHITE}üìä SYNC STATUS${NC}\"
    echo \"----------------\"
    
    if [[ -f \"$pid_file\" ]]; then\n        local pid=$(cat \"$pid_file\")\n        if kill -0 \"$pid\" 2>/dev/null; then\n            echo -e \"${GREEN}‚úÖ Status: RUNNING (PID: $pid)${NC}\"\n            \n            # Show process info\n            local cpu_usage=$(ps -p \"$pid\" -o %cpu --no-headers 2>/dev/null || echo \"N/A\")\n            local mem_usage=$(ps -p \"$pid\" -o %mem --no-headers 2>/dev/null || echo \"N/A\")\n            local start_time=$(ps -p \"$pid\" -o lstart --no-headers 2>/dev/null || echo \"N/A\")\n            \n            echo -e \"${BLUE}üîß CPU Usage: ${cpu_usage}%${NC}\"\n            echo -e \"${BLUE}üíæ Memory Usage: ${mem_usage}%${NC}\"\n            echo -e \"${BLUE}‚è∞ Started: $start_time${NC}\"\n        else\n            echo -e \"${RED}‚ùå Status: STOPPED (stale PID file)${NC}\"\n        fi\n    else\n        echo -e \"${YELLOW}‚è∏Ô∏è  Status: NOT RUNNING${NC}\"\n    fi\n    echo\n}\n\n# Show recent sync activity\nshow_recent_activity() {\n    echo -e \"${WHITE}üìà RECENT SYNC ACTIVITY${NC}\"\n    echo \"------------------------\"\n    \n    local latest_log=$(ls -t \"$LOG_DIR\"/realtime-sync-*.log 2>/dev/null | head -1)\n    \n    if [[ -n \"$latest_log\" && -f \"$latest_log\" ]]; then\n        echo -e \"${BLUE}üìÑ Log file: $(basename \"$latest_log\")${NC}\"\n        echo\n        \n        # Show last 10 sync events\n        tail -20 \"$latest_log\" | grep -E \"(SYNC|WATCH|ERROR)\" | tail -10 | while read -r line; do\n            if [[ \"$line\" == *\"ERROR\"* ]]; then\n                echo -e \"${RED}$line${NC}\"\n            elif [[ \"$line\" == *\"SYNC\"* ]]; then\n                echo -e \"${GREEN}$line${NC}\"\n            elif [[ \"$line\" == *\"WATCH\"* ]]; then\n                echo -e \"${CYAN}$line${NC}\"\n            else\n                echo \"$line\"\n            fi\n        done\n    else\n        echo -e \"${YELLOW}No sync logs found${NC}\"\n    fi\n    echo\n}\n\n# Show server comparison\nshow_server_comparison() {\n    echo -e \"${WHITE}üñ•Ô∏è  SERVER COMPARISON${NC}\"\n    echo \"---------------------\"\n    \n    # Source server info\n    echo -e \"${BLUE}üìç Source Server (192.168.0.1):${NC}\"\n    echo \"  CPU: $(nproc) cores\"\n    echo \"  RAM: $(free -h | awk '/^Mem:/ {print $2}')\"\n    echo \"  GPU: $(nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits 2>/dev/null | head -1 || echo 'N/A')\"\n    echo \"  Disk: $(df -h $PLATFORM_ROOT | awk 'NR==2 {print $4\" available\"}')\"\n    echo\n    \n    # Backup server info\n    echo -e \"${GREEN}üìç Backup Server (192.168.0.5):${NC}\"\n    if ssh -o ConnectTimeout=5 keith-ransom@192.168.0.5 \"echo 'connected'\" >/dev/null 2>&1; then\n        local backup_cpu=$(ssh keith-ransom@192.168.0.5 \"nproc\" 2>/dev/null || echo \"N/A\")\n        local backup_ram=$(ssh keith-ransom@192.168.0.5 \"free -h | awk '/^Mem:/ {print \\$2}'\" 2>/dev/null || echo \"N/A\")\n        local backup_gpu=$(ssh keith-ransom@192.168.0.5 \"nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits 2>/dev/null | head -1\" || echo \"N/A\")\n        local backup_disk=$(ssh keith-ransom@192.168.0.5 \"df -h ~/chat-copilot | awk 'NR==2 {print \\$4\\\" available\"}'\" 2>/dev/null || echo \"N/A\")\n        \n        echo \"  CPU: $backup_cpu cores\"\n        echo \"  RAM: $backup_ram\"\n        echo \"  GPU: $backup_gpu\"\n        echo \"  Disk: $backup_disk\"\n        echo -e \"  ${GREEN}‚úÖ Connection: OK${NC}\"\n    else\n        echo -e \"  ${RED}‚ùå Connection: FAILED${NC}\"\n    fi\n    echo\n}\n\n# Show sync statistics\nshow_sync_stats() {\n    echo -e \"${WHITE}üìä SYNC STATISTICS${NC}\"\n    echo \"-------------------\"\n    \n    local latest_log=$(ls -t \"$LOG_DIR\"/realtime-sync-*.log 2>/dev/null | head -1)\n    \n    if [[ -n \"$latest_log\" && -f \"$latest_log\" ]]; then\n        local total_syncs=$(grep -c \"SYNC\" \"$latest_log\" 2>/dev/null || echo \"0\")\n        local errors=$(grep -c \"ERROR\" \"$latest_log\" 2>/dev/null || echo \"0\")\n        local watches=$(grep -c \"WATCH\" \"$latest_log\" 2>/dev/null || echo \"0\")\n        local last_sync=$(grep \"SYNC\" \"$latest_log\" | tail -1 | awk '{print $1\" \"$2}' 2>/dev/null || echo \"Never\")\n        \n        echo -e \"${GREEN}üìà Total Syncs: $total_syncs${NC}\"\n        echo -e \"${CYAN}üëÅÔ∏è  File Watches: $watches${NC}\"\n        echo -e \"${RED}‚ùå Errors: $errors${NC}\"\n        echo -e \"${BLUE}‚è∞ Last Sync: $last_sync${NC}\"\n        \n        # Calculate sync rate\n        if [[ $total_syncs -gt 0 ]]; then\n            local log_age=$(stat -c %Y \"$latest_log\")\n            local current_time=$(date +%s)\n            local duration=$((current_time - log_age))\n            if [[ $duration -gt 0 ]]; then\n                local rate=$((total_syncs * 3600 / duration))\n                echo -e \"${PURPLE}üìä Sync Rate: $rate syncs/hour${NC}\"\n            fi\n        fi\n    else\n        echo -e \"${YELLOW}No statistics available${NC}\"\n    fi\n    echo\n}\n\n# Show quick actions menu\nshow_actions_menu() {\n    echo -e \"${WHITE}üéõÔ∏è  QUICK ACTIONS${NC}\"\n    echo \"----------------\"\n    echo -e \"${GREEN}[1]${NC} Start Real-Time Sync\"\n    echo -e \"${RED}[2]${NC} Stop Real-Time Sync\"\n    echo -e \"${BLUE}[3]${NC} Restart Sync\"\n    echo -e \"${CYAN}[4]${NC} View Live Logs\"\n    echo -e \"${PURPLE}[5]${NC} Manual Sync to Backup\"\n    echo -e \"${YELLOW}[6]${NC} Manual Sync from Backup\"\n    echo -e \"${WHITE}[7]${NC} Test Sync\"\n    echo -e \"${GREEN}[8]${NC} Switch to Backup Server (SSH)\"\n    echo -e \"${RED}[q]${NC} Quit Dashboard\"\n    echo\n}\n\n# Execute action\nexecute_action() {\n    local choice=$1\n    \n    case $choice in\n        \"1\")\n            echo -e \"${GREEN}Starting real-time sync...${NC}\"\n            \"$SCRIPT_DIR/realtime-sync.sh\" start --to-backup --include-systemd --daemon\n            sleep 2\n            ;;\n        \"2\")\n            echo -e \"${RED}Stopping real-time sync...${NC}\"\n            \"$SCRIPT_DIR/realtime-sync.sh\" stop\n            sleep 2\n            ;;\n        \"3\")\n            echo -e \"${BLUE}Restarting real-time sync...${NC}\"\n            \"$SCRIPT_DIR/realtime-sync.sh\" restart\n            sleep 2\n            ;;\n        \"4\")\n            echo -e \"${CYAN}Opening live logs (Ctrl+C to return)...${NC}\"\n            sleep 2\n            \"$SCRIPT_DIR/realtime-sync.sh\" monitor\n            ;;\n        \"5\")\n            echo -e \"${PURPLE}Manual sync to backup server...${NC}\"\n            \"$SCRIPT_DIR/rsync-platform-enhanced.sh\" push backup-server --include-systemd\n            echo \"Press Enter to continue...\"\n            read -r\n            ;;\n        \"6\")\n            echo -e \"${YELLOW}Manual sync from backup server...${NC}\"\n            \"$SCRIPT_DIR/rsync-platform-enhanced.sh\" pull backup-server --include-systemd\n            echo \"Press Enter to continue...\"\n            read -r\n            ;;\n        \"7\")\n            echo -e \"${WHITE}Testing sync functionality...${NC}\"\n            \"$SCRIPT_DIR/realtime-sync.sh\" test\n            echo \"Press Enter to continue...\"\n            read -r\n            ;;\n        \"8\")\n            echo -e \"${GREEN}Connecting to backup server...${NC}\"\n            echo \"Type 'exit' to return to dashboard\"\n            ssh keith-ransom@192.168.0.5\n            ;;\n        \"q\"|\"Q\")\n            echo -e \"${WHITE}Goodbye!${NC}\"\n            exit 0\n            ;;\n        *)\n            echo -e \"${RED}Invalid choice. Press Enter to continue...${NC}\"\n            read -r\n            ;;\n    esac\n}\n\n# Main dashboard loop\nmain() {\n    while true; do\n        show_header\n        show_sync_status\n        show_recent_activity\n        show_server_comparison\n        show_sync_stats\n        show_actions_menu\n        \n        echo -n \"Choose an action: \"\n        read -r choice\n        \n        execute_action \"$choice\"\n    done\n}\n\n# Handle Ctrl+C\ntrap 'echo -e \"\\n${WHITE}Dashboard closed.${NC}\"; exit 0' INT\n\n# Run dashboard\nmain"