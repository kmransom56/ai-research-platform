#!/bin/bash\n\n# =============================================================================\n# Chat Copilot Platform - Systemd Services Rsync Script\n# =============================================================================\n# This script handles synchronization of systemd service files between systems\n# Requires sudo privileges for /etc/systemd/system operations\n# =============================================================================\n\nset -euo pipefail\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m' # No Color\n\n# Script configuration\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPLATFORM_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nLOG_DIR=\"$PLATFORM_ROOT/logs/sync\"\nDATE=$(date +\"%Y%m%d_%H%M%S\")\nSYSTEMD_DIR=\"/etc/systemd/system\"\nTEMP_DIR=\"/tmp/chat-copilot-systemd-sync-$DATE\"\n\n# Create necessary directories\nmkdir -p \"$LOG_DIR\" \"$TEMP_DIR\"\n\n# Print functions\nprint_status() {\n    local level=$1\n    local message=$2\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    case $level in\n        \"INFO\")  echo -e \"${BLUE}[$timestamp] ‚ÑπÔ∏è  ${message}${NC}\" ;;\n        \"SUCCESS\") echo -e \"${GREEN}[$timestamp] ‚úÖ ${message}${NC}\" ;;\n        \"WARNING\") echo -e \"${YELLOW}[$timestamp] ‚ö†Ô∏è  ${message}${NC}\" ;;\n        \"ERROR\") echo -e \"${RED}[$timestamp] ‚ùå ${message}${NC}\" ;;\n        \"SYSTEMD\") echo -e \"${PURPLE}[$timestamp] üîß ${message}${NC}\" ;;\n        \"REMOTE\") echo -e \"${CYAN}[$timestamp] üåê ${message}${NC}\" ;;\n    esac\n}\n\nprint_banner() {\n    echo \"==============================================================================\"\n    echo \"üîß CHAT COPILOT PLATFORM SYSTEMD SERVICES SYNC\"\n    echo \"üöÄ Synchronizing systemd service files between systems\"\n    echo \"==============================================================================\"\n    echo\n}\n\nshow_help() {\n    cat << EOF\nüîß Chat Copilot Platform Systemd Services Sync\n\nUSAGE:\n    $0 [COMMAND] [TARGET] [OPTIONS]\n\nCOMMANDS:\n    scan              Scan local systemd services\n    backup            Backup local systemd services\n    push <target>     Push local systemd services to remote\n    pull <target>     Pull remote systemd services to local\n    sync <target>     Bidirectional sync of systemd services\n    install           Install services from backup/sync directory\n    enable            Enable and start synced services\n    disable           Disable and stop services\n    status            Show status of platform services\n    list              List platform-related services\n\nTARGETS:\n    Same as main rsync script:\n    - dev-server      Development server\n    - staging-server  Staging environment\n    - prod-server     Production server\n    - user@host       Custom target\n\nOPTIONS:\n    --dry-run         Show what would be done without executing\n    --force           Force operations without confirmation\n    --include-all     Include all systemd services (not just platform)\n    --backup-dir DIR  Custom backup directory\n    --verbose         Verbose output\n\nEXAMPLES:\n    # Scan local services\n    $0 scan\n\n    # Backup local services\n    $0 backup\n\n    # Push services to development server\n    $0 push dev-server\n\n    # Pull services from production\n    $0 pull prod-server --dry-run\n\n    # Sync services with staging\n    $0 sync staging-server\n\n    # Install services from backup\n    $0 install\n\n    # Enable platform services\n    $0 enable\n\nNOTES:\n    - This script requires sudo privileges for systemd operations\n    - Services are automatically reloaded after changes\n    - Backups are created before any destructive operations\n    - Only platform-related services are synced by default\n\nEOF\n}\n\n# Platform service patterns\nget_platform_service_patterns() {\n    echo \"*ai-platform*\"\n    echo \"*chat-copilot*\"\n    echo \"*openwebui*\"\n    echo \"*ollama*\"\n    echo \"*perplexica*\"\n    echo \"*searxng*\"\n    echo \"*autogen*\"\n    echo \"*magentic*\"\n}\n\n# Find platform-related services\nfind_platform_services() {\n    local search_dir=\"${1:-$SYSTEMD_DIR}\"\n    local services=()\n    \n    while IFS= read -r pattern; do\n        while IFS= read -r -d '' file; do\n            services+=(\"$file\")\n        done < <(find \"$search_dir\" -name \"$pattern\" -type f -print0 2>/dev/null || true)\n    done < <(get_platform_service_patterns)\n    \n    # Remove duplicates and sort\n    printf '%s\\n' \"${services[@]}\" | sort -u\n}\n\n# Scan local systemd services\nscan_services() {\n    print_status \"SYSTEMD\" \"Scanning local systemd services...\"\n    \n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform-related services found\"\n        return 0\n    fi\n    \n    print_status \"SUCCESS\" \"Found platform services:\"\n    echo \"$services\" | while read -r service; do\n        local basename=$(basename \"$service\")\n        local status=\"inactive\"\n        \n        if systemctl is-active \"$basename\" >/dev/null 2>&1; then\n            status=\"active\"\n        fi\n        \n        local enabled=\"disabled\"\n        if systemctl is-enabled \"$basename\" >/dev/null 2>&1; then\n            enabled=\"enabled\"\n        fi\n        \n        print_status \"INFO\" \"  $basename ($status, $enabled)\"\n    done\n}\n\n# Backup local systemd services\nbackup_services() {\n    local backup_dir=\"${1:-$PLATFORM_ROOT/backups/systemd-$DATE}\"\n    \n    print_status \"SYSTEMD\" \"Backing up platform systemd services...\"\n    \n    mkdir -p \"$backup_dir\"\n    \n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform services to backup\"\n        return 0\n    fi\n    \n    local count=0\n    echo \"$services\" | while read -r service; do\n        if [[ -f \"$service\" ]]; then\n            cp \"$service\" \"$backup_dir/\"\n            print_status \"SUCCESS\" \"Backed up: $(basename \"$service\")\"\n            ((count++))\n        fi\n    done\n    \n    # Also backup service states\n    echo \"$services\" | while read -r service; do\n        local basename=$(basename \"$service\")\n        local state_file=\"$backup_dir/${basename}.state\"\n        \n        echo \"# Service state for $basename\" > \"$state_file\"\n        echo \"ACTIVE=$(systemctl is-active \"$basename\" 2>/dev/null || echo 'inactive')\" >> \"$state_file\"\n        echo \"ENABLED=$(systemctl is-enabled \"$basename\" 2>/dev/null || echo 'disabled')\" >> \"$state_file\"\n    done\n    \n    print_status \"SUCCESS\" \"Services backed up to: $backup_dir\"\n    echo \"$backup_dir\"\n}\n\n# Load rsync configuration\nload_rsync_config() {\n    local config_file=\"$PLATFORM_ROOT/scripts/sync/rsync-config.conf\"\n    \n    if [[ -f \"$config_file\" ]]; then\n        source \"$config_file\"\n        return 0\n    else\n        print_status \"ERROR\" \"Rsync configuration not found. Run rsync-platform.sh setup first.\"\n        return 1\n    fi\n}\n\n# Get target configuration (reuse from main rsync script)\nget_target_config() {\n    local target=$1\n    \n    case $target in\n        \"dev-server\")\n            TARGET_PATH=\"${DEV_SERVER:-}\"\n            SSH_KEY=\"${SSH_KEY_DEV:-$HOME/.ssh/id_rsa}\"\n            ;;\n        \"staging-server\")\n            TARGET_PATH=\"${STAGING_SERVER:-}\"\n            SSH_KEY=\"${SSH_KEY_STAGING:-$HOME/.ssh/id_rsa}\"\n            ;;\n        \"prod-server\")\n            TARGET_PATH=\"${PROD_SERVER:-}\"\n            SSH_KEY=\"${SSH_KEY_PROD:-$HOME/.ssh/id_rsa}\"\n            ;;\n        \"backup-server\")\n            TARGET_PATH=\"${BACKUP_SERVER:-}\"\n            SSH_KEY=\"${SSH_KEY_BACKUP:-$HOME/.ssh/id_rsa}\"\n            ;;\n        *)\n            # Custom target\n            if [[ $target =~ ^[^@]+@[^:]+$ ]]; then\n                TARGET_HOST=\"$target\"\n                SSH_KEY=\"$HOME/.ssh/id_rsa\"\n                return 0\n            else\n                print_status \"ERROR\" \"Invalid target format: $target\"\n                return 1\n            fi\n            ;;\n    esac\n    \n    if [[ -z \"$TARGET_PATH\" ]]; then\n        print_status \"ERROR\" \"Target '$target' not configured\"\n        return 1\n    fi\n    \n    # Extract host from target path\n    TARGET_HOST=$(echo \"$TARGET_PATH\" | cut -d: -f1)\n    \n    return 0\n}\n\n# Push systemd services to remote\npush_services() {\n    local target=$1\n    \n    if ! load_rsync_config; then\n        return 1\n    fi\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    print_status \"SYSTEMD\" \"Pushing systemd services to $target...\"\n    \n    # Create backup first\n    local backup_dir\n    backup_dir=$(backup_services)\n    \n    # Create temporary directory with services\n    local temp_services_dir=\"$TEMP_DIR/services\"\n    mkdir -p \"$temp_services_dir\"\n    \n    # Copy platform services to temp directory\n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform services to push\"\n        return 0\n    fi\n    \n    echo \"$services\" | while read -r service; do\n        if [[ -f \"$service\" ]]; then\n            cp \"$service\" \"$temp_services_dir/\"\n        fi\n    done\n    \n    # Also copy the backup directory\n    cp -r \"$backup_dir\" \"$TEMP_DIR/backup\"\n    \n    # Rsync to remote\n    local rsync_opts=\"-avz --progress\"\n    [[ \"$DRY_RUN\" == \"true\" ]] && rsync_opts=\"$rsync_opts --dry-run\"\n    [[ \"$VERBOSE\" == \"true\" ]] && rsync_opts=\"$rsync_opts --verbose\"\n    \n    if rsync $rsync_opts -e \"ssh -i $SSH_KEY\" \"$TEMP_DIR/\" \"$TARGET_HOST:/tmp/chat-copilot-systemd-sync/\"; then\n        print_status \"SUCCESS\" \"Services pushed to $target\"\n        \n        if [[ \"$DRY_RUN\" != \"true\" ]]; then\n            # Execute remote installation script\n            local remote_script=\"\n                sudo mkdir -p /etc/systemd/system/chat-copilot-backup\n                sudo cp /tmp/chat-copilot-systemd-sync/backup/* /etc/systemd/system/chat-copilot-backup/\n                sudo cp /tmp/chat-copilot-systemd-sync/services/* /etc/systemd/system/\n                sudo systemctl daemon-reload\n                echo 'Systemd services installed and daemon reloaded'\n            \"\n            \n            print_status \"SYSTEMD\" \"Installing services on remote...\"\n            if ssh -i \"$SSH_KEY\" \"$TARGET_HOST\" \"$remote_script\"; then\n                print_status \"SUCCESS\" \"Services installed on $target\"\n            else\n                print_status \"ERROR\" \"Failed to install services on $target\"\n                return 1\n            fi\n        fi\n    else\n        print_status \"ERROR\" \"Failed to push services to $target\"\n        return 1\n    fi\n}\n\n# Pull systemd services from remote\npull_services() {\n    local target=$1\n    \n    if ! load_rsync_config; then\n        return 1\n    fi\n    \n    if ! get_target_config \"$target\"; then\n        return 1\n    fi\n    \n    print_status \"SYSTEMD\" \"Pulling systemd services from $target...\"\n    \n    # Create backup of local services first\n    backup_services\n    \n    # Create remote script to collect services\n    local remote_script=\"\n        mkdir -p /tmp/chat-copilot-systemd-pull\n        cd /tmp/chat-copilot-systemd-pull\n        \n        # Find platform services\n        find /etc/systemd/system -name '*ai-platform*' -o -name '*chat-copilot*' -o -name '*openwebui*' -o -name '*ollama*' -o -name '*perplexica*' -o -name '*searxng*' -o -name '*autogen*' -o -name '*magentic*' | while read service; do\n            if [[ -f \\$service ]]; then\n                cp \\$service .\n                basename=\\$(basename \\$service)\n                echo \\\"ACTIVE=\\$(systemctl is-active \\$basename 2>/dev/null || echo 'inactive')\\\" > \\${basename}.state\n                echo \\\"ENABLED=\\$(systemctl is-enabled \\$basename 2>/dev/null || echo 'disabled')\\\" >> \\${basename}.state\n            fi\n        done\n        \n        echo 'Remote services collected'\n    \"\n    \n    print_status \"SYSTEMD\" \"Collecting services from remote...\"\n    if ssh -i \"$SSH_KEY\" \"$TARGET_HOST\" \"$remote_script\"; then\n        # Pull the collected services\n        local rsync_opts=\"-avz --progress\"\n        [[ \"$DRY_RUN\" == \"true\" ]] && rsync_opts=\"$rsync_opts --dry-run\"\n        [[ \"$VERBOSE\" == \"true\" ]] && rsync_opts=\"$rsync_opts --verbose\"\n        \n        if rsync $rsync_opts -e \"ssh -i $SSH_KEY\" \"$TARGET_HOST:/tmp/chat-copilot-systemd-pull/\" \"$TEMP_DIR/pulled/\"; then\n            print_status \"SUCCESS\" \"Services pulled from $target\"\n            \n            if [[ \"$DRY_RUN\" != \"true\" ]]; then\n                print_status \"SYSTEMD\" \"Installing pulled services...\"\n                \n                # Install pulled services\n                for service_file in \"$TEMP_DIR/pulled/\"*.service; do\n                    if [[ -f \"$service_file\" ]]; then\n                        local basename=$(basename \"$service_file\")\n                        print_status \"INFO\" \"Installing: $basename\"\n                        \n                        if sudo cp \"$service_file\" \"/etc/systemd/system/\"; then\n                            print_status \"SUCCESS\" \"Installed: $basename\"\n                        else\n                            print_status \"ERROR\" \"Failed to install: $basename\"\n                        fi\n                    fi\n                done\n                \n                # Reload systemd\n                sudo systemctl daemon-reload\n                print_status \"SUCCESS\" \"Systemd daemon reloaded\"\n            fi\n        else\n            print_status \"ERROR\" \"Failed to pull services from $target\"\n            return 1\n        fi\n    else\n        print_status \"ERROR\" \"Failed to collect services from $target\"\n        return 1\n    fi\n}\n\n# Sync systemd services bidirectionally\nsync_services() {\n    local target=$1\n    \n    print_status \"SYSTEMD\" \"Starting bidirectional sync with $target...\"\n    \n    # First do dry runs to show what would change\n    local original_dry_run=\"$DRY_RUN\"\n    DRY_RUN=\"true\"\n    \n    print_status \"INFO\" \"Checking what would be pushed:\"\n    push_services \"$target\"\n    \n    print_status \"INFO\" \"Checking what would be pulled:\"\n    pull_services \"$target\"\n    \n    DRY_RUN=\"$original_dry_run\"\n    \n    if [[ \"$DRY_RUN\" != \"true\" ]]; then\n        read -p \"Continue with bidirectional sync? (y/N): \" -n 1 -r\n        echo\n        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n            print_status \"INFO\" \"Sync cancelled by user\"\n            return 0\n        fi\n        \n        # Perform actual sync\n        print_status \"SYSTEMD\" \"Performing bidirectional sync...\"\n        push_services \"$target\" && pull_services \"$target\"\n    fi\n}\n\n# Install services from backup/sync directory\ninstall_services() {\n    local source_dir=\"${1:-$PLATFORM_ROOT/backups/systemd}\"\n    \n    if [[ ! -d \"$source_dir\" ]]; then\n        print_status \"ERROR\" \"Source directory not found: $source_dir\"\n        return 1\n    fi\n    \n    print_status \"SYSTEMD\" \"Installing services from $source_dir...\"\n    \n    # Create backup first\n    backup_services\n    \n    local count=0\n    for service_file in \"$source_dir/\"*.service; do\n        if [[ -f \"$service_file\" ]]; then\n            local basename=$(basename \"$service_file\")\n            \n            if [[ \"$DRY_RUN\" == \"true\" ]]; then\n                print_status \"INFO\" \"Would install: $basename\"\n            else\n                print_status \"INFO\" \"Installing: $basename\"\n                \n                if sudo cp \"$service_file\" \"/etc/systemd/system/\"; then\n                    print_status \"SUCCESS\" \"Installed: $basename\"\n                    ((count++))\n                else\n                    print_status \"ERROR\" \"Failed to install: $basename\"\n                fi\n            fi\n        fi\n    done\n    \n    if [[ \"$DRY_RUN\" != \"true\" && $count -gt 0 ]]; then\n        sudo systemctl daemon-reload\n        print_status \"SUCCESS\" \"Installed $count services and reloaded systemd\"\n    fi\n}\n\n# Enable and start platform services\nenable_services() {\n    print_status \"SYSTEMD\" \"Enabling platform services...\"\n    \n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform services found to enable\"\n        return 0\n    fi\n    \n    echo \"$services\" | while read -r service; do\n        local basename=$(basename \"$service\")\n        \n        if [[ \"$DRY_RUN\" == \"true\" ]]; then\n            print_status \"INFO\" \"Would enable and start: $basename\"\n        else\n            print_status \"INFO\" \"Enabling and starting: $basename\"\n            \n            if sudo systemctl enable \"$basename\" && sudo systemctl start \"$basename\"; then\n                print_status \"SUCCESS\" \"Enabled and started: $basename\"\n            else\n                print_status \"WARNING\" \"Failed to enable/start: $basename\"\n            fi\n        fi\n    done\n}\n\n# Disable and stop platform services\ndisable_services() {\n    print_status \"SYSTEMD\" \"Disabling platform services...\"\n    \n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform services found to disable\"\n        return 0\n    fi\n    \n    echo \"$services\" | while read -r service; do\n        local basename=$(basename \"$service\")\n        \n        if [[ \"$DRY_RUN\" == \"true\" ]]; then\n            print_status \"INFO\" \"Would stop and disable: $basename\"\n        else\n            print_status \"INFO\" \"Stopping and disabling: $basename\"\n            \n            if sudo systemctl stop \"$basename\" && sudo systemctl disable \"$basename\"; then\n                print_status \"SUCCESS\" \"Stopped and disabled: $basename\"\n            else\n                print_status \"WARNING\" \"Failed to stop/disable: $basename\"\n            fi\n        fi\n    done\n}\n\n# Show status of platform services\nshow_service_status() {\n    print_status \"SYSTEMD\" \"Platform services status:\"\n    \n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform services found\"\n        return 0\n    fi\n    \n    echo\n    printf \"%-40s %-10s %-10s\\n\" \"SERVICE\" \"ACTIVE\" \"ENABLED\"\n    printf \"%-40s %-10s %-10s\\n\" \"-------\" \"------\" \"-------\"\n    \n    echo \"$services\" | while read -r service; do\n        local basename=$(basename \"$service\")\n        local active=$(systemctl is-active \"$basename\" 2>/dev/null || echo \"inactive\")\n        local enabled=$(systemctl is-enabled \"$basename\" 2>/dev/null || echo \"disabled\")\n        \n        printf \"%-40s %-10s %-10s\\n\" \"$basename\" \"$active\" \"$enabled\"\n    done\n}\n\n# List platform services\nlist_services() {\n    print_status \"SYSTEMD\" \"Platform-related services:\"\n    \n    local services\n    services=$(find_platform_services)\n    \n    if [[ -z \"$services\" ]]; then\n        print_status \"WARNING\" \"No platform services found\"\n        return 0\n    fi\n    \n    echo \"$services\" | while read -r service; do\n        print_status \"INFO\" \"  $(basename \"$service\")\"\n    done\n}\n\n# Parse command line arguments\nparse_arguments() {\n    # Default values\n    DRY_RUN=\"false\"\n    FORCE=\"false\"\n    INCLUDE_ALL=\"false\"\n    VERBOSE=\"false\"\n    BACKUP_DIR=\"\"\n    \n    # Parse options\n    while [[ $# -gt 0 ]]; do\n        case $1 in\n            --dry-run)\n                DRY_RUN=\"true\"\n                shift\n                ;;\n            --force)\n                FORCE=\"true\"\n                shift\n                ;;\n            --include-all)\n                INCLUDE_ALL=\"true\"\n                shift\n                ;;\n            --verbose)\n                VERBOSE=\"true\"\n                shift\n                ;;\n            --backup-dir)\n                BACKUP_DIR=\"$2\"\n                shift 2\n                ;;\n            --help|-h)\n                show_help\n                exit 0\n                ;;\n            -*)\n                print_status \"ERROR\" \"Unknown option: $1\"\n                show_help\n                exit 1\n                ;;\n            *)\n                # This is a positional argument\n                break\n                ;;\n        esac\n    done\n    \n    # Store remaining arguments\n    REMAINING_ARGS=(\"$@\")\n}\n\n# Cleanup function\ncleanup() {\n    if [[ -d \"$TEMP_DIR\" ]]; then\n        rm -rf \"$TEMP_DIR\"\n    fi\n}\n\n# Main function\nmain() {\n    print_banner\n    \n    # Set up cleanup\n    trap cleanup EXIT\n    \n    # Parse arguments\n    parse_arguments \"$@\"\n    \n    # Check if we have any arguments left\n    if [[ ${#REMAINING_ARGS[@]} -eq 0 ]]; then\n        print_status \"ERROR\" \"No command specified\"\n        show_help\n        exit 1\n    fi\n    \n    local command=\"${REMAINING_ARGS[0]}\"\n    local target=\"${REMAINING_ARGS[1]:-}\"\n    \n    # Check for sudo privileges for certain commands\n    case $command in\n        \"install\"|\"enable\"|\"disable\")\n            if [[ $EUID -ne 0 ]] && ! sudo -n true 2>/dev/null; then\n                print_status \"WARNING\" \"This command requires sudo privileges\"\n                print_status \"INFO\" \"You may be prompted for your password\"\n            fi\n            ;;\n    esac\n    \n    # Execute command\n    case $command in\n        \"scan\")\n            scan_services\n            ;;\n        \"backup\")\n            backup_services \"$BACKUP_DIR\"\n            ;;\n        \"push\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for push command\"; exit 1; }\n            push_services \"$target\"\n            ;;\n        \"pull\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for pull command\"; exit 1; }\n            pull_services \"$target\"\n            ;;\n        \"sync\")\n            [[ -z \"$target\" ]] && { print_status \"ERROR\" \"Target required for sync command\"; exit 1; }\n            sync_services \"$target\"\n            ;;\n        \"install\")\n            install_services \"$target\"\n            ;;\n        \"enable\")\n            enable_services\n            ;;\n        \"disable\")\n            disable_services\n            ;;\n        \"status\")\n            show_service_status\n            ;;\n        \"list\")\n            list_services\n            ;;\n        \"help\")\n            show_help\n            ;;\n        *)\n            print_status \"ERROR\" \"Unknown command: $command\"\n            show_help\n            exit 1\n            ;;\n    esac\n}\n\n# Run main function with all arguments\nmain \"$@\""