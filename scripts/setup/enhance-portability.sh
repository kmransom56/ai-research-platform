#!/bin/bash\n\n# =============================================================================\n# Chat Copilot Platform Portability Enhancement Script\n# =============================================================================\n# This script enhances the portability of the Chat Copilot platform by:\n# - Detecting and fixing hard-coded paths\n# - Creating environment-based configurations\n# - Setting up cross-platform compatibility\n# - Preparing for easy deployment on different systems\n# =============================================================================\n\nset -euo pipefail\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nNC='\\033[0m' # No Color\n\n# Script configuration\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPLATFORM_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\nBACKUP_DIR=\"$PLATFORM_ROOT/backups/portability-$(date +%Y%m%d_%H%M%S)\"\nLOG_FILE=\"$PLATFORM_ROOT/logs/portability-enhancement.log\"\n\n# Create necessary directories\nmkdir -p \"$(dirname \"$LOG_FILE\")\" \"$BACKUP_DIR\"\n\n# Print functions\nprint_status() {\n    local level=$1\n    local message=$2\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    case $level in\n        \"INFO\")  echo -e \"${BLUE}[$timestamp] ℹ️  ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"SUCCESS\") echo -e \"${GREEN}[$timestamp] ✅ ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"WARNING\") echo -e \"${YELLOW}[$timestamp] ⚠️  ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"ERROR\") echo -e \"${RED}[$timestamp] ❌ ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n        \"ENHANCE\") echo -e \"${PURPLE}[$timestamp] 🔧 ${message}${NC}\" | tee -a \"$LOG_FILE\" ;;\n    esac\n}\n\nprint_banner() {\n    echo \"==============================================================================\"\n    echo \"🔧 CHAT COPILOT PLATFORM PORTABILITY ENHANCEMENT\"\n    echo \"🚀 Making your platform deployment-ready for any environment\"\n    echo \"==============================================================================\"\n    echo\n}\n\n# Detect current system information\ndetect_system() {\n    print_status \"INFO\" \"Detecting system information...\"\n    \n    # Operating system\n    if [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        OS=\"linux\"\n        DISTRO=$(lsb_release -si 2>/dev/null || echo \"unknown\")\n    elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        OS=\"macos\"\n        DISTRO=\"macOS\"\n    elif [[ \"$OSTYPE\" == \"msys\" || \"$OSTYPE\" == \"cygwin\" ]]; then\n        OS=\"windows\"\n        DISTRO=\"Windows\"\n    else\n        OS=\"unknown\"\n        DISTRO=\"unknown\"\n    fi\n    \n    # Architecture\n    ARCH=$(uname -m)\n    \n    # Current user and group\n    CURRENT_USER=$(whoami)\n    CURRENT_GROUP=$(id -gn)\n    \n    # Current IP address\n    if command -v ip >/dev/null 2>&1; then\n        CURRENT_IP=$(ip route get 1.1.1.1 | grep -oP 'src \\K\\S+' 2>/dev/null || echo \"127.0.0.1\")\n    elif command -v ifconfig >/dev/null 2>&1; then\n        CURRENT_IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1' | head -1 || echo \"127.0.0.1\")\n    else\n        CURRENT_IP=\"127.0.0.1\"\n    fi\n    \n    # Docker availability\n    if command -v docker >/dev/null 2>&1; then\n        DOCKER_AVAILABLE=\"true\"\n        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)\n    else\n        DOCKER_AVAILABLE=\"false\"\n        DOCKER_VERSION=\"not installed\"\n    fi\n    \n    # Docker Compose availability\n    if command -v docker-compose >/dev/null 2>&1; then\n        DOCKER_COMPOSE_AVAILABLE=\"true\"\n        DOCKER_COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)\n    else\n        DOCKER_COMPOSE_AVAILABLE=\"false\"\n        DOCKER_COMPOSE_VERSION=\"not installed\"\n    fi\n    \n    print_status \"SUCCESS\" \"System detection completed:\"\n    print_status \"INFO\" \"  OS: $OS ($DISTRO)\"\n    print_status \"INFO\" \"  Architecture: $ARCH\"\n    print_status \"INFO\" \"  User: $CURRENT_USER:$CURRENT_GROUP\"\n    print_status \"INFO\" \"  IP Address: $CURRENT_IP\"\n    print_status \"INFO\" \"  Docker: $DOCKER_VERSION ($DOCKER_AVAILABLE)\"\n    print_status \"INFO\" \"  Docker Compose: $DOCKER_COMPOSE_VERSION ($DOCKER_COMPOSE_AVAILABLE)\"\n}\n\n# Create backup of current configuration\ncreate_backup() {\n    print_status \"INFO\" \"Creating backup of current configuration...\"\n    \n    # Files to backup\n    local files_to_backup=(\n        \".env\"\n        \"docker-compose.yml\"\n        \"docker-compose.portable.yml\"\n        \"configs/\"\n        \"scripts/\"\n        \"nginx-configs/\"\n    )\n    \n    for item in \"${files_to_backup[@]}\"; do\n        if [[ -e \"$PLATFORM_ROOT/$item\" ]]; then\n            cp -r \"$PLATFORM_ROOT/$item\" \"$BACKUP_DIR/\"\n            print_status \"SUCCESS\" \"Backed up: $item\"\n        fi\n    done\n    \n    print_status \"SUCCESS\" \"Backup created at: $BACKUP_DIR\"\n}\n\n# Scan for hard-coded paths\nscan_hardcoded_paths() {\n    print_status \"INFO\" \"Scanning for hard-coded paths...\"\n    \n    local hardcoded_patterns=(\n        \"/home/keith\"\n        \"/opt/chat-copilot\"\n        \"/var/lib/chat-copilot\"\n        \"100.123.10.72\"\n        \"localhost:3000\"\n        \"127.0.0.1:3000\"\n    )\n    \n    local files_with_hardcoded=()\n    \n    for pattern in \"${hardcoded_patterns[@]}\"; do\n        print_status \"INFO\" \"Searching for pattern: $pattern\"\n        \n        # Search in configuration files\n        while IFS= read -r -d '' file; do\n            if grep -l \"$pattern\" \"$file\" >/dev/null 2>&1; then\n                files_with_hardcoded+=(\"$file:$pattern\")\n                print_status \"WARNING\" \"Found '$pattern' in: $file\"\n            fi\n        done < <(find \"$PLATFORM_ROOT\" -type f \\( -name \"*.yml\" -o -name \"*.yaml\" -o -name \"*.json\" -o -name \"*.conf\" -o -name \"*.env*\" -o -name \"*.sh\" \\) -print0 2>/dev/null)\n    done\n    \n    if [[ ${#files_with_hardcoded[@]} -gt 0 ]]; then\n        print_status \"WARNING\" \"Found ${#files_with_hardcoded[@]} files with hard-coded paths\"\n        return 1\n    else\n        print_status \"SUCCESS\" \"No hard-coded paths found\"\n        return 0\n    fi\n}\n\n# Create portable environment template\ncreate_portable_env() {\n    print_status \"ENHANCE\" \"Creating portable environment template...\"\n    \n    cat > \"$PLATFORM_ROOT/.env.portable.template\" << EOF\n# =============================================================================\n# Chat Copilot Platform - Portable Environment Configuration\n# =============================================================================\n# This file contains environment variables that make the platform portable\n# across different systems and deployment environments.\n# \n# Copy this file to .env and customize for your environment:\n# cp .env.portable.template .env\n# =============================================================================\n\n# System Configuration (Auto-detected)\nPLATFORM_ROOT=$PLATFORM_ROOT\nPLATFORM_USER=$CURRENT_USER\nPLATFORM_GROUP=$CURRENT_GROUP\nPLATFORM_IP=$CURRENT_IP\nPLATFORM_OS=$OS\nPLATFORM_ARCH=$ARCH\n\n# Network Configuration\nPLATFORM_DOMAIN=localhost\nPLATFORM_PROTOCOL=http\nPLATFORM_PORT=3000\n\n# SSL Configuration (for production)\nSSL_ENABLED=false\nSSL_CERT_PATH=/etc/ssl/certs/platform.crt\nSSL_KEY_PATH=/etc/ssl/private/platform.key\n\n# Service Ports (customize as needed)\nCHAT_COPILOT_BACKEND_PORT=11000\nCHAT_COPILOT_FRONTEND_PORT=3000\nOPENWEBUI_PORT=11880\nPERPLEXICA_PORT=11003\nSEARXNG_PORT=11004\nAUTOGEN_STUDIO_PORT=11005\nMAGENTIC_ONE_PORT=11006\nVSCODE_PORT=57081\nGRAFANA_PORT=11007\nPROMETHEUS_PORT=11008\nNGINX_HTTP_PORT=80\nNGINX_HTTPS_PORT=443\n\n# Database Configuration\nPOSTGRES_HOST=postgres\nPOSTGRES_PORT=5432\nPOSTGRES_DB=chatcopilot\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=\\${POSTGRES_PASSWORD:-$(openssl rand -hex 16)}\n\n# Redis Configuration\nREDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_PASSWORD=\\${REDIS_PASSWORD:-$(openssl rand -hex 16)}\n\n# Qdrant Configuration\nQDRANT_HOST=qdrant\nQDRANT_PORT=6333\nQDRANT_API_KEY=\\${QDRANT_API_KEY:-$(openssl rand -hex 16)}\n\n# AI Provider Configuration\n# OpenAI\nOPENAI_API_KEY=\\${OPENAI_API_KEY:-your-openai-api-key-here}\nOPENAI_MODEL=gpt-4\nOPENAI_EMBEDDING_MODEL=text-embedding-ada-002\n\n# Azure OpenAI (alternative to OpenAI)\nAZURE_OPENAI_ENDPOINT=\\${AZURE_OPENAI_ENDPOINT:-}\nAZURE_OPENAI_API_KEY=\\${AZURE_OPENAI_API_KEY:-}\nAZURE_OPENAI_DEPLOYMENT_NAME=\\${AZURE_OPENAI_DEPLOYMENT_NAME:-}\nAZURE_OPENAI_API_VERSION=2023-12-01-preview\n\n# Anthropic Claude (alternative)\nANTHROPIC_API_KEY=\\${ANTHROPIC_API_KEY:-}\n\n# Local LLM Configuration (Ollama)\nOLLAMA_HOST=ollama\nOLLAMA_PORT=11434\nOLLAMA_MODEL=llama2\n\n# Authentication & Security\nJWT_SECRET=\\${JWT_SECRET:-$(openssl rand -hex 32)}\nSESSION_SECRET=\\${SESSION_SECRET:-$(openssl rand -hex 32)}\nENCRYPTION_KEY=\\${ENCRYPTION_KEY:-$(openssl rand -hex 32)}\n\n# Application Configuration\nASPNETCORE_ENVIRONMENT=\\${ASPNETCORE_ENVIRONMENT:-Development}\nLOG_LEVEL=\\${LOG_LEVEL:-Information}\nENABLE_HEALTH_MONITORING=\\${ENABLE_HEALTH_MONITORING:-true}\nENABLE_METRICS=\\${ENABLE_METRICS:-true}\n\n# Docker Configuration\nDOCKER_REGISTRY=\\${DOCKER_REGISTRY:-}\nDOCKER_TAG=\\${DOCKER_TAG:-latest}\nDOCKER_NETWORK=\\${DOCKER_NETWORK:-chat-copilot-network}\n\n# Volume Paths (customize for your system)\nDATA_PATH=\\${PLATFORM_ROOT}/data\nLOGS_PATH=\\${PLATFORM_ROOT}/logs\nBACKUPS_PATH=\\${PLATFORM_ROOT}/backups\nCONFIG_PATH=\\${PLATFORM_ROOT}/configs\nTEMP_PATH=\\${PLATFORM_ROOT}/temp\n\n# Backup Configuration\nBACKUP_ENABLED=true\nBACKUP_SCHEDULE=\"0 2 * * *\"  # Daily at 2 AM\nBACKUP_RETENTION_DAYS=30\nBACKUP_REMOTE_PATH=\\${BACKUP_REMOTE_PATH:-}\n\n# Monitoring Configuration\nMONITORING_ENABLED=true\nMETRICS_RETENTION_DAYS=90\nALERT_EMAIL=\\${ALERT_EMAIL:-admin@localhost}\n\n# Development Configuration\nDEVELOPMENT_MODE=\\${DEVELOPMENT_MODE:-false}\nHOT_RELOAD_ENABLED=\\${HOT_RELOAD_ENABLED:-false}\nDEBUG_ENABLED=\\${DEBUG_ENABLED:-false}\n\n# Production Configuration\nPRODUCTION_MODE=\\${PRODUCTION_MODE:-false}\nSSL_REDIRECT=\\${SSL_REDIRECT:-false}\nSECURITY_HEADERS=\\${SECURITY_HEADERS:-true}\nRATE_LIMITING=\\${RATE_LIMITING:-true}\n\n# Tailscale Configuration (for secure networking)\nTAILSCALE_ENABLED=\\${TAILSCALE_ENABLED:-false}\nTAILSCALE_HOSTNAME=\\${TAILSCALE_HOSTNAME:-}\nTAILSCALE_AUTH_KEY=\\${TAILSCALE_AUTH_KEY:-}\n\n# Custom Configuration\n# Add your custom environment variables below\n# CUSTOM_VAR=\\${CUSTOM_VAR:-default_value}\n\nEOF\n\n    print_status \"SUCCESS\" \"Portable environment template created: .env.portable.template\"\n}\n\n# Create portable Docker Compose file\ncreate_portable_docker_compose() {\n    print_status \"ENHANCE\" \"Creating portable Docker Compose configuration...\"\n    \n    cat > \"$PLATFORM_ROOT/docker-compose.portable.yml\" << 'EOF'\n# =============================================================================\n# Chat Copilot Platform - Portable Docker Compose Configuration\n# =============================================================================\n# This Docker Compose file uses environment variables for all configuration,\n# making it portable across different systems and environments.\n# =============================================================================\n\nversion: '3.8'\n\nnetworks:\n  chat-copilot-network:\n    driver: bridge\n    name: ${DOCKER_NETWORK:-chat-copilot-network}\n\nvolumes:\n  postgres-data:\n    name: ${DOCKER_NETWORK:-chat-copilot}-postgres-data\n  redis-data:\n    name: ${DOCKER_NETWORK:-chat-copilot}-redis-data\n  qdrant-data:\n    name: ${DOCKER_NETWORK:-chat-copilot}-qdrant-data\n  ollama-data:\n    name: ${DOCKER_NETWORK:-chat-copilot}-ollama-data\n\nservices:\n  # =============================================================================\n  # Core Chat Copilot Services\n  # =============================================================================\n  \n  chat-copilot-backend:\n    image: ${DOCKER_REGISTRY}chat-copilot-backend:${DOCKER_TAG:-latest}\n    build:\n      context: ./webapi\n      dockerfile: Dockerfile\n    container_name: chat-copilot-backend\n    restart: unless-stopped\n    ports:\n      - \"${CHAT_COPILOT_BACKEND_PORT:-11000}:8080\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}\n      - ASPNETCORE_URLS=http://+:8080\n      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=${POSTGRES_PORT:-5432};Database=${POSTGRES_DB:-chatcopilot};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD}\n      - ConnectionStrings__Redis=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}\n      - Qdrant__Endpoint=http://${QDRANT_HOST:-qdrant}:${QDRANT_PORT:-6333}\n      - OpenAI__ApiKey=${OPENAI_API_KEY}\n      - OpenAI__Model=${OPENAI_MODEL:-gpt-4}\n      - Azure__OpenAI__Endpoint=${AZURE_OPENAI_ENDPOINT}\n      - Azure__OpenAI__ApiKey=${AZURE_OPENAI_API_KEY}\n      - Azure__OpenAI__DeploymentName=${AZURE_OPENAI_DEPLOYMENT_NAME}\n      - JwtSettings__SecretKey=${JWT_SECRET}\n      - Logging__LogLevel__Default=${LOG_LEVEL:-Information}\n    volumes:\n      - ${LOGS_PATH:-./logs}:/app/logs\n      - ${CONFIG_PATH:-./configs}:/app/configs\n    networks:\n      - chat-copilot-network\n    depends_on:\n      - postgres\n      - redis\n      - qdrant\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/healthz\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  chat-copilot-frontend:\n    image: ${DOCKER_REGISTRY}chat-copilot-frontend:${DOCKER_TAG:-latest}\n    build:\n      context: ./webapp\n      dockerfile: Dockerfile\n    container_name: chat-copilot-frontend\n    restart: unless-stopped\n    ports:\n      - \"${CHAT_COPILOT_FRONTEND_PORT:-3000}:3000\"\n    environment:\n      - REACT_APP_BACKEND_URL=http://${PLATFORM_IP:-localhost}:${CHAT_COPILOT_BACKEND_PORT:-11000}\n      - REACT_APP_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}\n    volumes:\n      - ${LOGS_PATH:-./logs}:/app/logs\n    networks:\n      - chat-copilot-network\n    depends_on:\n      - chat-copilot-backend\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # =============================================================================\n  # Database Services\n  # =============================================================================\n  \n  postgres:\n    image: postgres:15-alpine\n    container_name: chat-copilot-postgres\n    restart: unless-stopped\n    ports:\n      - \"${POSTGRES_PORT:-5432}:5432\"\n    environment:\n      - POSTGRES_DB=${POSTGRES_DB:-chatcopilot}\n      - POSTGRES_USER=${POSTGRES_USER:-postgres}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n      - ${BACKUPS_PATH:-./backups}:/backups\n    networks:\n      - chat-copilot-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-chatcopilot}\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  redis:\n    image: redis:7-alpine\n    container_name: chat-copilot-redis\n    restart: unless-stopped\n    ports:\n      - \"${REDIS_PORT:-6379}:6379\"\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis-data:/data\n    networks:\n      - chat-copilot-network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  qdrant:\n    image: qdrant/qdrant:latest\n    container_name: chat-copilot-qdrant\n    restart: unless-stopped\n    ports:\n      - \"${QDRANT_PORT:-6333}:6333\"\n    environment:\n      - QDRANT__SERVICE__HTTP_PORT=6333\n      - QDRANT__SERVICE__GRPC_PORT=6334\n    volumes:\n      - qdrant-data:/qdrant/storage\n    networks:\n      - chat-copilot-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:6333/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # =============================================================================\n  # AI Services\n  # =============================================================================\n  \n  openwebui:\n    image: ghcr.io/open-webui/open-webui:main\n    container_name: chat-copilot-openwebui\n    restart: unless-stopped\n    ports:\n      - \"${OPENWEBUI_PORT:-11880}:8080\"\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - WEBUI_SECRET_KEY=${SESSION_SECRET}\n      - OLLAMA_BASE_URL=http://ollama:11434\n    volumes:\n      - ${DATA_PATH:-./data}/openwebui:/app/backend/data\n    networks:\n      - chat-copilot-network\n    depends_on:\n      - ollama\n\n  ollama:\n    image: ollama/ollama:latest\n    container_name: chat-copilot-ollama\n    restart: unless-stopped\n    ports:\n      - \"${OLLAMA_PORT:-11434}:11434\"\n    volumes:\n      - ollama-data:/root/.ollama\n    networks:\n      - chat-copilot-network\n    environment:\n      - OLLAMA_HOST=0.0.0.0\n\n  # =============================================================================\n  # Search Services\n  # =============================================================================\n  \n  perplexica:\n    image: itzcrazykns/perplexica:main\n    container_name: chat-copilot-perplexica\n    restart: unless-stopped\n    ports:\n      - \"${PERPLEXICA_PORT:-11003}:3000\"\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - SEARXNG_API_URL=http://searxng:8080\n    volumes:\n      - ${CONFIG_PATH:-./configs}/perplexica:/app/config\n    networks:\n      - chat-copilot-network\n    depends_on:\n      - searxng\n\n  searxng:\n    image: searxng/searxng:latest\n    container_name: chat-copilot-searxng\n    restart: unless-stopped\n    ports:\n      - \"${SEARXNG_PORT:-11004}:8080\"\n    volumes:\n      - ${CONFIG_PATH:-./configs}/searxng:/etc/searxng\n    networks:\n      - chat-copilot-network\n    environment:\n      - SEARXNG_SECRET=${SESSION_SECRET}\n\n  # =============================================================================\n  # Development Services (optional)\n  # =============================================================================\n  \n  vscode:\n    image: codercom/code-server:latest\n    container_name: chat-copilot-vscode\n    restart: unless-stopped\n    ports:\n      - \"${VSCODE_PORT:-57081}:8080\"\n    environment:\n      - PASSWORD=${SESSION_SECRET}\n    volumes:\n      - ${PLATFORM_ROOT}:/home/coder/workspace\n      - ${DATA_PATH:-./data}/vscode:/home/coder/.local/share/code-server\n    networks:\n      - chat-copilot-network\n    profiles:\n      - development\n\n  # =============================================================================\n  # Monitoring Services (optional)\n  # =============================================================================\n  \n  grafana:\n    image: grafana/grafana:latest\n    container_name: chat-copilot-grafana\n    restart: unless-stopped\n    ports:\n      - \"${GRAFANA_PORT:-11007}:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${SESSION_SECRET}\n    volumes:\n      - ${DATA_PATH:-./data}/grafana:/var/lib/grafana\n      - ${CONFIG_PATH:-./configs}/grafana:/etc/grafana/provisioning\n    networks:\n      - chat-copilot-network\n    profiles:\n      - monitoring\n\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: chat-copilot-prometheus\n    restart: unless-stopped\n    ports:\n      - \"${PROMETHEUS_PORT:-11008}:9090\"\n    volumes:\n      - ${DATA_PATH:-./data}/prometheus:/prometheus\n      - ${CONFIG_PATH:-./configs}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n    networks:\n      - chat-copilot-network\n    profiles:\n      - monitoring\n\n  # =============================================================================\n  # Reverse Proxy (optional)\n  # =============================================================================\n  \n  nginx:\n    image: nginx:alpine\n    container_name: chat-copilot-nginx\n    restart: unless-stopped\n    ports:\n      - \"${NGINX_HTTP_PORT:-80}:80\"\n      - \"${NGINX_HTTPS_PORT:-443}:443\"\n    volumes:\n      - ${CONFIG_PATH:-./configs}/nginx:/etc/nginx/conf.d\n      - ${SSL_CERT_PATH:-./ssl}:/etc/ssl/certs\n      - ${SSL_KEY_PATH:-./ssl}:/etc/ssl/private\n    networks:\n      - chat-copilot-network\n    depends_on:\n      - chat-copilot-frontend\n      - chat-copilot-backend\n    profiles:\n      - production\nEOF\n\n    print_status \"SUCCESS\" \"Portable Docker Compose configuration created: docker-compose.portable.yml\"\n}\n\n# Create portable startup script\ncreate_portable_startup() {\n    print_status \"ENHANCE\" \"Creating portable startup script...\"\n    \n    cat > \"$PLATFORM_ROOT/start-platform-portable.sh\" << 'EOF'\n#!/bin/bash\n\n# =============================================================================\n# Chat Copilot Platform - Portable Startup Script\n# =============================================================================\n# This script starts the Chat Copilot platform using portable configuration\n# =============================================================================\n\nset -euo pipefail\n\n# Colors for output\nGREEN='\\033[0;32m'\nBLUE='\\033[0;34m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\n# Script directory\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nprint_status() {\n    local level=$1\n    local message=$2\n    case $level in\n        \"INFO\")  echo -e \"${BLUE}ℹ️  ${message}${NC}\" ;;\n        \"SUCCESS\") echo -e \"${GREEN}✅ ${message}${NC}\" ;;\n        \"WARNING\") echo -e \"${YELLOW}⚠️  ${message}${NC}\" ;;\n        \"ERROR\") echo -e \"${RED}❌ ${message}${NC}\" ;;\n    esac\n}\n\nprint_banner() {\n    echo \"==============================================================================\"\n    echo \"🚀 CHAT COPILOT PLATFORM - PORTABLE STARTUP\"\n    echo \"🌐 Starting your AI research platform...\"\n    echo \"==============================================================================\"\n    echo\n}\n\n# Load environment variables\nload_environment() {\n    if [[ -f \"$SCRIPT_DIR/.env\" ]]; then\n        print_status \"INFO\" \"Loading environment from .env file...\"\n        set -a\n        source \"$SCRIPT_DIR/.env\"\n        set +a\n    elif [[ -f \"$SCRIPT_DIR/.env.portable.template\" ]]; then\n        print_status \"WARNING\" \"No .env file found. Creating from template...\"\n        cp \"$SCRIPT_DIR/.env.portable.template\" \"$SCRIPT_DIR/.env\"\n        print_status \"INFO\" \"Please edit .env file with your configuration and run again\"\n        print_status \"INFO\" \"nano $SCRIPT_DIR/.env\"\n        exit 1\n    else\n        print_status \"ERROR\" \"No environment configuration found\"\n        print_status \"INFO\" \"Run: ./scripts/setup/enhance-portability.sh\"\n        exit 1\n    fi\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    print_status \"INFO\" \"Checking prerequisites...\"\n    \n    # Check Docker\n    if ! command -v docker >/dev/null 2>&1; then\n        print_status \"ERROR\" \"Docker is not installed\"\n        exit 1\n    fi\n    \n    # Check Docker Compose\n    if ! command -v docker-compose >/dev/null 2>&1; then\n        print_status \"ERROR\" \"Docker Compose is not installed\"\n        exit 1\n    fi\n    \n    # Check if Docker is running\n    if ! docker info >/dev/null 2>&1; then\n        print_status \"ERROR\" \"Docker is not running\"\n        exit 1\n    fi\n    \n    print_status \"SUCCESS\" \"Prerequisites check passed\"\n}\n\n# Create required directories\ncreate_directories() {\n    print_status \"INFO\" \"Creating required directories...\"\n    \n    local dirs=(\n        \"${DATA_PATH:-./data}\"\n        \"${LOGS_PATH:-./logs}\"\n        \"${BACKUPS_PATH:-./backups}\"\n        \"${CONFIG_PATH:-./configs}\"\n        \"${TEMP_PATH:-./temp}\"\n    )\n    \n    for dir in \"${dirs[@]}\"; do\n        mkdir -p \"$dir\"\n        print_status \"SUCCESS\" \"Created directory: $dir\"\n    done\n}\n\n# Start services\nstart_services() {\n    local profile=\"${1:-default}\"\n    \n    print_status \"INFO\" \"Starting Chat Copilot platform with profile: $profile\"\n    \n    # Determine which compose file to use\n    local compose_file=\"docker-compose.portable.yml\"\n    if [[ ! -f \"$compose_file\" ]]; then\n        compose_file=\"docker-compose.yml\"\n    fi\n    \n    # Start services based on profile\n    case $profile in\n        \"development\")\n            docker-compose -f \"$compose_file\" --profile development up -d\n            ;;\n        \"production\")\n            docker-compose -f \"$compose_file\" --profile production up -d\n            ;;\n        \"monitoring\")\n            docker-compose -f \"$compose_file\" --profile monitoring up -d\n            ;;\n        \"full\")\n            docker-compose -f \"$compose_file\" --profile development --profile monitoring --profile production up -d\n            ;;\n        *)\n            docker-compose -f \"$compose_file\" up -d\n            ;;\n    esac\n    \n    print_status \"SUCCESS\" \"Services started successfully\"\n}\n\n# Show access information\nshow_access_info() {\n    print_status \"SUCCESS\" \"Chat Copilot Platform is now running!\"\n    echo\n    echo \"🌐 Access Points:\"\n    echo \"   Chat Copilot Frontend:  http://${PLATFORM_IP:-localhost}:${CHAT_COPILOT_FRONTEND_PORT:-3000}\"\n    echo \"   Chat Copilot Backend:   http://${PLATFORM_IP:-localhost}:${CHAT_COPILOT_BACKEND_PORT:-11000}\"\n    echo \"   OpenWebUI:              http://${PLATFORM_IP:-localhost}:${OPENWEBUI_PORT:-11880}\"\n    echo \"   Perplexica:             http://${PLATFORM_IP:-localhost}:${PERPLEXICA_PORT:-11003}\"\n    echo \"   SearXNG:                http://${PLATFORM_IP:-localhost}:${SEARXNG_PORT:-11004}\"\n    \n    if [[ \"${DEVELOPMENT_MODE:-false}\" == \"true\" ]]; then\n        echo \"   VS Code:                http://${PLATFORM_IP:-localhost}:${VSCODE_PORT:-57081}\"\n    fi\n    \n    if [[ \"${MONITORING_ENABLED:-false}\" == \"true\" ]]; then\n        echo \"   Grafana:                http://${PLATFORM_IP:-localhost}:${GRAFANA_PORT:-11007}\"\n        echo \"   Prometheus:             http://${PLATFORM_IP:-localhost}:${PROMETHEUS_PORT:-11008}\"\n    fi\n    \n    echo\n    echo \"📊 Management:\"\n    echo \"   View logs:              docker-compose logs -f\"\n    echo \"   Stop platform:          docker-compose down\"\n    echo \"   Restart services:       docker-compose restart\"\n    echo \"   Update images:          docker-compose pull && docker-compose up -d\"\n    echo\n}\n\n# Main function\nmain() {\n    local profile=\"${1:-default}\"\n    \n    print_banner\n    load_environment\n    check_prerequisites\n    create_directories\n    start_services \"$profile\"\n    \n    # Wait a moment for services to start\n    sleep 5\n    \n    show_access_info\n}\n\n# Show help\nif [[ \"${1:-}\" == \"--help\" || \"${1:-}\" == \"-h\" ]]; then\n    echo \"Usage: $0 [PROFILE]\"\n    echo\n    echo \"Profiles:\"\n    echo \"  default      Start core services only\"\n    echo \"  development  Include development tools (VS Code)\"\n    echo \"  production   Include production services (nginx)\"\n    echo \"  monitoring   Include monitoring services (Grafana, Prometheus)\"\n    echo \"  full         Include all services\"\n    echo\n    echo \"Examples:\"\n    echo \"  $0                    # Start with default profile\"\n    echo \"  $0 development        # Start with development tools\"\n    echo \"  $0 production         # Start with production setup\"\n    echo \"  $0 full               # Start everything\"\n    exit 0\nfi\n\n# Run main function\nmain \"$@\"\nEOF\n\n    chmod +x \"$PLATFORM_ROOT/start-platform-portable.sh\"\n    print_status \"SUCCESS\" \"Portable startup script created: start-platform-portable.sh\"\n}\n\n# Create system detection script\ncreate_system_detector() {\n    print_status \"ENHANCE\" \"Creating system detection script...\"\n    \n    cat > \"$PLATFORM_ROOT/scripts/setup/detect-system.sh\" << 'EOF'\n#!/bin/bash\n\n# =============================================================================\n# System Detection Script for Chat Copilot Platform\n# =============================================================================\n# This script detects system configuration and generates appropriate\n# environment variables for portable deployment\n# =============================================================================\n\nset -euo pipefail\n\n# Detect operating system\ndetect_os() {\n    if [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        echo \"linux\"\n    elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"macos\"\n    elif [[ \"$OSTYPE\" == \"msys\" || \"$OSTYPE\" == \"cygwin\" ]]; then\n        echo \"windows\"\n    else\n        echo \"unknown\"\n    fi\n}\n\n# Detect Linux distribution\ndetect_distro() {\n    if [[ -f /etc/os-release ]]; then\n        . /etc/os-release\n        echo \"$ID\"\n    elif command -v lsb_release >/dev/null 2>&1; then\n        lsb_release -si | tr '[:upper:]' '[:lower:]'\n    else\n        echo \"unknown\"\n    fi\n}\n\n# Detect architecture\ndetect_arch() {\n    uname -m\n}\n\n# Detect IP address\ndetect_ip() {\n    if command -v ip >/dev/null 2>&1; then\n        ip route get 1.1.1.1 | grep -oP 'src \\K\\S+' 2>/dev/null || echo \"127.0.0.1\"\n    elif command -v ifconfig >/dev/null 2>&1; then\n        ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1' | head -1 || echo \"127.0.0.1\"\n    else\n        echo \"127.0.0.1\"\n    fi\n}\n\n# Detect available memory\ndetect_memory() {\n    if [[ \"$(detect_os)\" == \"linux\" ]]; then\n        free -m | awk 'NR==2{printf \"%.0f\", $2/1024}'\n    elif [[ \"$(detect_os)\" == \"macos\" ]]; then\n        echo $(($(sysctl -n hw.memsize) / 1024 / 1024 / 1024))\n    else\n        echo \"unknown\"\n    fi\n}\n\n# Detect available disk space\ndetect_disk() {\n    df -BG . | awk 'NR==2{print $4}' | sed 's/G//'\n}\n\n# Check Docker availability\ncheck_docker() {\n    if command -v docker >/dev/null 2>&1; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n# Check Docker Compose availability\ncheck_docker_compose() {\n    if command -v docker-compose >/dev/null 2>&1; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n# Generate system info JSON\ngenerate_system_info() {\n    cat << EOF\n{\n  \"os\": \"$(detect_os)\",\n  \"distro\": \"$(detect_distro)\",\n  \"arch\": \"$(detect_arch)\",\n  \"ip\": \"$(detect_ip)\",\n  \"memory_gb\": \"$(detect_memory)\",\n  \"disk_gb\": \"$(detect_disk)\",\n  \"docker\": \"$(check_docker)\",\n  \"docker_compose\": \"$(check_docker_compose)\",\n  \"user\": \"$(whoami)\",\n  \"group\": \"$(id -gn)\",\n  \"home\": \"$HOME\",\n  \"pwd\": \"$(pwd)\",\n  \"timestamp\": \"$(date -Iseconds)\"\n}\nEOF\n}\n\n# Main execution\nif [[ \"${1:-}\" == \"--json\" ]]; then\n    generate_system_info\nelse\n    echo \"System Information:\"\n    echo \"  OS: $(detect_os)\"\n    echo \"  Distribution: $(detect_distro)\"\n    echo \"  Architecture: $(detect_arch)\"\n    echo \"  IP Address: $(detect_ip)\"\n    echo \"  Memory: $(detect_memory) GB\"\n    echo \"  Disk Space: $(detect_disk) GB\"\n    echo \"  Docker: $(check_docker)\"\n    echo \"  Docker Compose: $(check_docker_compose)\"\n    echo \"  User: $(whoami)\"\n    echo \"  Group: $(id -gn)\"\nfi\nEOF\n\n    chmod +x \"$PLATFORM_ROOT/scripts/setup/detect-system.sh\"\n    print_status \"SUCCESS\" \"System detection script created: scripts/setup/detect-system.sh\"\n}\n\n# Fix hard-coded paths in existing files\nfix_hardcoded_paths() {\n    print_status \"ENHANCE\" \"Fixing hard-coded paths in configuration files...\"\n    \n    # Common hard-coded patterns and their replacements\n    local replacements=(\n        \"s|/home/keith|\\${PLATFORM_ROOT}|g\"\n        \"s|/opt/chat-copilot|\\${PLATFORM_ROOT}|g\"\n        \"s|100\\.123\\.10\\.72|\\${PLATFORM_IP}|g\"\n        \"s|localhost:3000|\\${PLATFORM_IP}:\\${CHAT_COPILOT_FRONTEND_PORT}|g\"\n        \"s|:11000|:\\${CHAT_COPILOT_BACKEND_PORT}|g\"\n        \"s|:11880|:\\${OPENWEBUI_PORT}|g\"\n    )\n    \n    # Files to process\n    local files_to_fix=()\n    while IFS= read -r -d '' file; do\n        files_to_fix+=(\"$file\")\n    done < <(find \"$PLATFORM_ROOT\" -type f \\( -name \"*.yml\" -o -name \"*.yaml\" -o -name \"*.json\" -o -name \"*.conf\" -o -name \"*.sh\" \\) -not -path \"*/backups/*\" -not -path \"*/.git/*\" -print0 2>/dev/null)\n    \n    local fixed_count=0\n    for file in \"${files_to_fix[@]}\"; do\n        local file_changed=false\n        \n        for replacement in \"${replacements[@]}\"; do\n            if sed -i.bak \"$replacement\" \"$file\" 2>/dev/null; then\n                if ! cmp -s \"$file\" \"$file.bak\"; then\n                    file_changed=true\n                fi\n                rm -f \"$file.bak\"\n            fi\n        done\n        \n        if [[ \"$file_changed\" == \"true\" ]]; then\n            print_status \"SUCCESS\" \"Fixed hard-coded paths in: $file\"\n            ((fixed_count++))\n        fi\n    done\n    \n    print_status \"SUCCESS\" \"Fixed hard-coded paths in $fixed_count files\"\n}\n\n# Create installation summary\ncreate_summary() {\n    print_status \"INFO\" \"Creating portability enhancement summary...\"\n    \n    cat > \"$PLATFORM_ROOT/PORTABILITY_SUMMARY.md\" << EOF\n# Chat Copilot Platform - Portability Enhancement Summary\n\nGenerated on: $(date)\nSystem: $OS ($DISTRO) $ARCH\nUser: $CURRENT_USER:$CURRENT_GROUP\nIP: $CURRENT_IP\n\n## Files Created/Modified\n\n### Environment Configuration\n- ✅ \\`.env.portable.template\\` - Portable environment template\n- ✅ \\`docker-compose.portable.yml\\` - Portable Docker Compose configuration\n- ✅ \\`start-platform-portable.sh\\` - Portable startup script\n\n### Setup Scripts\n- ✅ \\`scripts/setup/detect-system.sh\\` - System detection utility\n- ✅ \\`scripts/setup/enhance-portability.sh\\` - This enhancement script\n- ✅ \\`scripts/sync/rsync-platform.sh\\` - Rsync synchronization script\n\n### Backup\n- ✅ Backup created at: \\`$BACKUP_DIR\\`\n\n## Next Steps\n\n### 1. Configure Environment\n\\`\\`\\`bash\n# Copy the portable template\ncp .env.portable.template .env\n\n# Edit with your configuration\nnano .env\n\\`\\`\\`\n\n### 2. Start Platform\n\\`\\`\\`bash\n# Start with default profile\n./start-platform-portable.sh\n\n# Or start with development tools\n./start-platform-portable.sh development\n\n# Or start everything\n./start-platform-portable.sh full\n\\`\\`\\`\n\n### 3. Setup Rsync (Optional)\n\\`\\`\\`bash\n# Configure rsync targets\n./scripts/sync/rsync-platform.sh setup\n\n# Test connection\n./scripts/sync/rsync-platform.sh test dev-server\n\n# Sync with remote\n./scripts/sync/rsync-platform.sh push dev-server\n\\`\\`\\`\n\n## Access Points\n\nAfter starting the platform, you can access:\n\n- **Chat Copilot Frontend**: http://$CURRENT_IP:3000\n- **Chat Copilot Backend**: http://$CURRENT_IP:11000\n- **OpenWebUI**: http://$CURRENT_IP:11880\n- **Perplexica**: http://$CURRENT_IP:11003\n- **SearXNG**: http://$CURRENT_IP:11004\n\n## System Requirements Met\n\n- ✅ Docker: $DOCKER_AVAILABLE ($DOCKER_VERSION)\n- ✅ Docker Compose: $DOCKER_COMPOSE_AVAILABLE ($DOCKER_COMPOSE_VERSION)\n- ✅ Operating System: $OS ($DISTRO)\n- ✅ Architecture: $ARCH\n\n## Portability Features\n\n- ✅ Environment-based configuration\n- ✅ Cross-platform compatibility\n- ✅ Flexible deployment profiles\n- ✅ Automated system detection\n- ✅ Rsync synchronization support\n- ✅ Backup and restore capabilities\n\nYour Chat Copilot platform is now portable and ready for deployment on any compatible system!\nEOF\n\n    print_status \"SUCCESS\" \"Portability summary created: PORTABILITY_SUMMARY.md\"\n}\n\n# Main function\nmain() {\n    print_banner\n    \n    print_status \"INFO\" \"Starting portability enhancement for Chat Copilot platform...\"\n    print_status \"INFO\" \"Platform root: $PLATFORM_ROOT\"\n    print_status \"INFO\" \"Backup directory: $BACKUP_DIR\"\n    print_status \"INFO\" \"Log file: $LOG_FILE\"\n    \n    # Detect system\n    detect_system\n    \n    # Create backup\n    create_backup\n    \n    # Scan for hard-coded paths\n    if scan_hardcoded_paths; then\n        print_status \"INFO\" \"No hard-coded paths found to fix\"\n    else\n        print_status \"INFO\" \"Hard-coded paths detected, will fix them\"\n        fix_hardcoded_paths\n    fi\n    \n    # Create portable configurations\n    create_portable_env\n    create_portable_docker_compose\n    create_portable_startup\n    create_system_detector\n    \n    # Create summary\n    create_summary\n    \n    print_status \"SUCCESS\" \"Portability enhancement completed successfully!\"\n    print_status \"INFO\" \"Next steps:\"\n    print_status \"INFO\" \"  1. Review and edit .env.portable.template\"\n    print_status \"INFO\" \"  2. Copy to .env: cp .env.portable.template .env\"\n    print_status \"INFO\" \"  3. Start platform: ./start-platform-portable.sh\"\n    print_status \"INFO\" \"  4. Setup rsync: ./scripts/sync/rsync-platform.sh setup\"\n    \n    echo\n    print_status \"SUCCESS\" \"Your Chat Copilot platform is now portable! 🚀\"\n}\n\n# Run main function\nmain \"$@\""